
SPI_DMA_W5500_NANDFLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af8  08006af8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c46c  200000a4  08006ba4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c510  08006ba4  0002c510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dac  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002871  00000000  00000000  00030ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00033738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d76  00000000  00000000  00034858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017236  00000000  00000000  000355ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b55  00000000  00000000  0004c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092eef  00000000  00000000  0005e359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004de8  00000000  00000000  000f1248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000f6030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068cc 	.word	0x080068cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080068cc 	.word	0x080068cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_SPI_TxRxCpltCallback>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

DMA_HandleTypeDef hdma_memtomem_dma2_stream0;
/* USER CODE BEGIN PV */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d102      	bne.n	80005a2 <HAL_SPI_TxRxCpltCallback+0x16>
        spi_dma_completed = true;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_SPI_TxRxCpltCallback+0x28>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
    }
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000c0d0 	.word	0x2000c0d0
 80005b4:	200040c4 	.word	0x200040c4

080005b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13){
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c8:	d102      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x18>
        button_pressed_flag = 1;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x24>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
    }
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	2000c0cc 	.word	0x2000c0cc

080005e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <HAL_UART_TxCpltCallback+0x24>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d102      	bne.n	80005f8 <HAL_UART_TxCpltCallback+0x18>
        uartTxComplete = true;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_UART_TxCpltCallback+0x28>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
    }
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40004400 	.word	0x40004400
 8000608:	200040c5 	.word	0x200040c5

0800060c <UART_SendString>:

void UART_SendString(char* str){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	uartTxComplete = false;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <UART_SendString+0x40>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)str, strlen(str));
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fde0 	bl	80001e0 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	b29b      	uxth	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <UART_SendString+0x44>)
 800062a:	f004 fc7d 	bl	8004f28 <HAL_UART_Transmit_DMA>
	while (!uartTxComplete);
 800062e:	bf00      	nop
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <UART_SendString+0x40>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f7      	bne.n	8000630 <UART_SendString+0x24>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200040c5 	.word	0x200040c5
 8000650:	2000c230 	.word	0x2000c230

08000654 <UART_SendNumber>:
    NAND_SendCommand(0x70);
    status = NAND_ReadData();
    return status;
}

void UART_SendNumber(uint32_t number) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    char num_str[12];
    snprintf(num_str, sizeof(num_str), "%lu\r\n", number);
 800065c:	f107 000c 	add.w	r0, r7, #12
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <UART_SendNumber+0x28>)
 8000664:	210c      	movs	r1, #12
 8000666:	f005 fc69 	bl	8005f3c <sniprintf>
    UART_SendString(num_str);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffcc 	bl	800060c <UART_SendString>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	080068f0 	.word	0x080068f0

08000680 <NAND_WaitReady>:

int NAND_WaitReady(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    const uint32_t timeout = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
    uint32_t start = HAL_GetTick();
 800068a:	f002 f91b 	bl	80028c4 <HAL_GetTick>
 800068e:	6038      	str	r0, [r7, #0]
    while (HAL_GPIO_ReadPin(FLASH_RB_GPIO_Port, FLASH_RB_Pin) == GPIO_PIN_RESET) {
 8000690:	e00a      	b.n	80006a8 <NAND_WaitReady+0x28>
        if ((HAL_GetTick() - start) > timeout) {
 8000692:	f002 f917 	bl	80028c4 <HAL_GetTick>
 8000696:	4602      	mov	r2, r0
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d202      	bcs.n	80006a8 <NAND_WaitReady+0x28>
            return -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a6:	e007      	b.n	80006b8 <NAND_WaitReady+0x38>
    while (HAL_GPIO_ReadPin(FLASH_RB_GPIO_Port, FLASH_RB_Pin) == GPIO_PIN_RESET) {
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <NAND_WaitReady+0x40>)
 80006ac:	f002 ffd2 	bl	8003654 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0ed      	beq.n	8000692 <NAND_WaitReady+0x12>
        }
    }
    return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020000 	.word	0x40020000

080006c4 <NAND_SendCommand>:

void NAND_SendCommand(uint8_t command){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
    FLASH_CLE_GPIO_Port->BSRR = FLASH_CLE_Pin;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <NAND_SendCommand+0x44>)
 80006d0:	2220      	movs	r2, #32
 80006d2:	619a      	str	r2, [r3, #24]
    FLASH_ALE_GPIO_Port->BSRR = (uint32_t)FLASH_ALE_Pin << 16U;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <NAND_SendCommand+0x44>)
 80006d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006da:	619a      	str	r2, [r3, #24]
    GPIOB->ODR = command;
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <NAND_SendCommand+0x48>)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	6153      	str	r3, [r2, #20]
    FLASH_WE_GPIO_Port->BSRR = (uint32_t)FLASH_WE_Pin << 16U;      // Сбросить WE (RESET - начало импульса WE)
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <NAND_SendCommand+0x44>)
 80006e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006e8:	619a      	str	r2, [r3, #24]
    FLASH_WE_GPIO_Port->BSRR = FLASH_WE_Pin;                       // Установить WE (SET - конец импульса WE)
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <NAND_SendCommand+0x44>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
    FLASH_CLE_GPIO_Port->BSRR = (uint32_t)FLASH_CLE_Pin << 16U;    // Сбросить CLE (RESET)
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <NAND_SendCommand+0x44>)
 80006f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006f8:	619a      	str	r2, [r3, #24]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400

08000710 <NAND_SendAddress>:

void NAND_SendAddress(uint8_t address){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
    FLASH_ALE_GPIO_Port->BSRR = FLASH_ALE_Pin;                      // Установить ALE (SET)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <NAND_SendAddress+0x44>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	619a      	str	r2, [r3, #24]
    FLASH_CLE_GPIO_Port->BSRR = (uint32_t)FLASH_CLE_Pin << 16U;     // Сбросить CLE (RESET)
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <NAND_SendAddress+0x44>)
 8000722:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000726:	619a      	str	r2, [r3, #24]
    GPIOB->ODR = address;
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <NAND_SendAddress+0x48>)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	6153      	str	r3, [r2, #20]
    FLASH_WE_GPIO_Port->BSRR = (uint32_t)FLASH_WE_Pin << 16U;       // Сбросить WE (RESET - начало импульса WE)
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <NAND_SendAddress+0x44>)
 8000730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000734:	619a      	str	r2, [r3, #24]
    FLASH_WE_GPIO_Port->BSRR = FLASH_WE_Pin;                        // Установить WE (SET - конец импульса WE)
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <NAND_SendAddress+0x44>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
    FLASH_ALE_GPIO_Port->BSRR = (uint32_t)FLASH_ALE_Pin << 16U;     // Сбросить ALE (RESET)
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <NAND_SendAddress+0x44>)
 8000740:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000744:	619a      	str	r2, [r3, #24]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400

0800075c <NAND_WriteData>:

void NAND_WriteData(uint8_t data){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
    FLASH_CLE_GPIO_Port->BSRR = (uint32_t)FLASH_CLE_Pin << 16U;     // Сбросить CLE (RESET)
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <NAND_WriteData+0x64>)
 8000768:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800076c:	619a      	str	r2, [r3, #24]
    FLASH_ALE_GPIO_Port->BSRR = (uint32_t)FLASH_ALE_Pin << 16U;     // Сбросить ALE (RESET)
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <NAND_WriteData+0x64>)
 8000770:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000774:	619a      	str	r2, [r3, #24]
    GPIOB->MODER &= ~0x0000FFFF;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <NAND_WriteData+0x68>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <NAND_WriteData+0x68>)
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 0x00005555;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <NAND_WriteData+0x68>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <NAND_WriteData+0x68>)
 8000788:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800078c:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000790:	6013      	str	r3, [r2, #0]
    GPIOB->ODR = (GPIOB->ODR & ~0xFF) | (data & 0xFF);
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <NAND_WriteData+0x68>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4909      	ldr	r1, [pc, #36]	; (80007c4 <NAND_WriteData+0x68>)
 800079e:	4313      	orrs	r3, r2
 80007a0:	614b      	str	r3, [r1, #20]
    FLASH_WE_GPIO_Port->BSRR = (uint32_t)FLASH_WE_Pin << 16U;       // Сбросить WE (RESET)
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <NAND_WriteData+0x64>)
 80007a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007a8:	619a      	str	r2, [r3, #24]
    FLASH_WE_GPIO_Port->BSRR = FLASH_WE_Pin;                        // Установить WE (SET)
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <NAND_WriteData+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020400 	.word	0x40020400

080007c8 <NAND_EraseBlock>:
    GPIOB->MODER &= ~0x0000FFFF;
    GPIOB->MODER |= 0x00005555;
    return data;
}

void NAND_EraseBlock(uint32_t block) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    char debug_msg[50];
    NAND_SendCommand(0x60);
 80007d0:	2060      	movs	r0, #96	; 0x60
 80007d2:	f7ff ff77 	bl	80006c4 <NAND_SendCommand>
    uint32_t page_address = block * PAGES_PER_BLOCK;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
    NAND_SendAddress((uint8_t)(0x00));
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff ff97 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)(0x00));
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ff94 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)(page_address & 0xFF));
 80007e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff8f 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page_address >> 8) & 0xFF));
 80007f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff89 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page_address >> 16) & 0xFF));
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	0c1b      	lsrs	r3, r3, #16
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff83 	bl	8000710 <NAND_SendAddress>
    NAND_SendCommand(0xD0);
 800080a:	20d0      	movs	r0, #208	; 0xd0
 800080c:	f7ff ff5a 	bl	80006c4 <NAND_SendCommand>
    snprintf(debug_msg, "Block %lu erased successfully\r\n", block);
 8000810:	4905      	ldr	r1, [pc, #20]	; (8000828 <NAND_EraseBlock+0x60>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4618      	mov	r0, r3
 800081a:	f005 fb8f 	bl	8005f3c <sniprintf>
    //UART_SendString(debug_msg);
}
 800081e:	bf00      	nop
 8000820:	3740      	adds	r7, #64	; 0x40
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080068f8 	.word	0x080068f8

0800082c <NAND_WritePage>:

void NAND_WritePage(uint32_t page, uint32_t column, uint8_t* data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    NAND_SendCommand(0x80);
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	f7ff ff43 	bl	80006c4 <NAND_SendCommand>
    NAND_SendAddress((uint8_t)(column & 0xFF));             // Колонка (низкий байт)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff64 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((column >> 8) & 0xFF));      // Колонка (высокий байт)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff5e 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)(page & 0xFF));               // Страница (байт 0)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff59 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page >> 8) & 0xFF));        // Страница (байт 1)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff53 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page >> 16) & 0xFF));       // Страница (байт 2)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	0c1b      	lsrs	r3, r3, #16
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff4d 	bl	8000710 <NAND_SendAddress>
    for (int i = 0; i < PAGE_SIZE; i++) {
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <NAND_WritePage+0x64>
        NAND_WriteData(data[i]);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff69 	bl	800075c <NAND_WriteData>
    for (int i = 0; i < PAGE_SIZE; i++) {
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000896:	dbf1      	blt.n	800087c <NAND_WritePage+0x50>
    }
    HAL_GPIO_WritePin(FLASH_WE_GPIO_Port, FLASH_WE_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089e:	4809      	ldr	r0, [pc, #36]	; (80008c4 <NAND_WritePage+0x98>)
 80008a0:	f002 fef0 	bl	8003684 <HAL_GPIO_WritePin>
    NAND_SendCommand(0x10);
 80008a4:	2010      	movs	r0, #16
 80008a6:	f7ff ff0d 	bl	80006c4 <NAND_SendCommand>
    if (NAND_WaitReady() != 0) {
 80008aa:	f7ff fee9 	bl	8000680 <NAND_WaitReady>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <NAND_WritePage+0x8e>
        UART_SendString("Write Operation Timeout\r\n");
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <NAND_WritePage+0x9c>)
 80008b6:	f7ff fea9 	bl	800060c <UART_SendString>
    }
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40020000 	.word	0x40020000
 80008c8:	08006918 	.word	0x08006918

080008cc <NAND_ReadPage>:

void NAND_ReadPage(uint32_t page, uint32_t column, uint8_t* buffer) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
    NAND_SendCommand(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fef3 	bl	80006c4 <NAND_SendCommand>
    NAND_SendAddress((uint8_t)(column & 0xFF));             // Колонка (низкий байт)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff14 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((column >> 8) & 0xFF));      // Колонка (высокий байт)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff0e 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)(page >> 16 & 0xFF));         // Страница (байт 0)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff08 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page >> 8) & 0xFF));        // Страница (байт 1)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff02 	bl	8000710 <NAND_SendAddress>
    NAND_SendAddress((uint8_t)((page >> 16) & 0xFF));       // Страница (байт 2)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fefc 	bl	8000710 <NAND_SendAddress>
    NAND_SendCommand(0x30);
 8000918:	2030      	movs	r0, #48	; 0x30
 800091a:	f7ff fed3 	bl	80006c4 <NAND_SendCommand>
    if (NAND_WaitReady() != 0){
 800091e:	f7ff feaf 	bl	8000680 <NAND_WaitReady>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <NAND_ReadPage+0x64>
        UART_SendString("Read Operation Timeout\r\n");
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <NAND_ReadPage+0x6c>)
 800092a:	f7ff fe6f 	bl	800060c <UART_SendString>
        return;
 800092e:	bf00      	nop
    }
}
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	08006934 	.word	0x08006934

0800093c <ReadAllPages>:

void ReadAllPages(){
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
	uint32_t page_count = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
	uint32_t total_pages = TOTAL_BLOCKS * PAGES_PER_BLOCK;
 8000946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094a:	607b      	str	r3, [r7, #4]
	UART_SendString("Start read all pages...\r\n");
 800094c:	4827      	ldr	r0, [pc, #156]	; (80009ec <ReadAllPages+0xb0>)
 800094e:	f7ff fe5d 	bl	800060c <UART_SendString>
	UART_SendString("Total pages: ");
 8000952:	4827      	ldr	r0, [pc, #156]	; (80009f0 <ReadAllPages+0xb4>)
 8000954:	f7ff fe5a 	bl	800060c <UART_SendString>
	UART_SendNumber(total_pages);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fe7b 	bl	8000654 <UART_SendNumber>
	UART_SendString("\r\n");
 800095e:	4825      	ldr	r0, [pc, #148]	; (80009f4 <ReadAllPages+0xb8>)
 8000960:	f7ff fe54 	bl	800060c <UART_SendString>
    for(uint32_t block = 0; block < TOTAL_BLOCKS; block++){
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	e037      	b.n	80009da <ReadAllPages+0x9e>
    	for(uint32_t page_in_block = 0; page_in_block < PAGES_PER_BLOCK; page_in_block++){
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e02e      	b.n	80009ce <ReadAllPages+0x92>
    		current_page = block * PAGES_PER_BLOCK + page_in_block;
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	019a      	lsls	r2, r3, #6
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <ReadAllPages+0xbc>)
 800097a:	6013      	str	r3, [r2, #0]
    		for(uint32_t i = 0; i < READ_BUFFER_SIZE; i++) {
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	e00e      	b.n	80009a0 <ReadAllPages+0x64>
    			read_buffer[i] = (uint8_t)((current_page + i) & 0xFF);
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <ReadAllPages+0xbc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b2d9      	uxtb	r1, r3
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <ReadAllPages+0xc0>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
    		for(uint32_t i = 0; i < READ_BUFFER_SIZE; i++) {
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009a6:	d3ec      	bcc.n	8000982 <ReadAllPages+0x46>
    		}
    		NAND_ReadPage(current_page, 0, read_buffer);
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <ReadAllPages+0xbc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <ReadAllPages+0xc0>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff8b 	bl	80008cc <NAND_ReadPage>
    		page_count++;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
            UART_SendString("Page ");
 80009bc:	4810      	ldr	r0, [pc, #64]	; (8000a00 <ReadAllPages+0xc4>)
 80009be:	f7ff fe25 	bl	800060c <UART_SendString>
            UART_SendNumber(page_count);
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff fe46 	bl	8000654 <UART_SendNumber>
    	for(uint32_t page_in_block = 0; page_in_block < PAGES_PER_BLOCK; page_in_block++){
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b3f      	cmp	r3, #63	; 0x3f
 80009d2:	d9cd      	bls.n	8000970 <ReadAllPages+0x34>
    for(uint32_t block = 0; block < TOTAL_BLOCKS; block++){
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	3301      	adds	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d9c4      	bls.n	800096a <ReadAllPages+0x2e>
            //UART_SendString("Read Data: \n");
            //UART_SendDataHex(read_buffer, READ_BUFFER_SIZE);
    	}
    }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08006950 	.word	0x08006950
 80009f0:	0800696c 	.word	0x0800696c
 80009f4:	080068ec 	.word	0x080068ec
 80009f8:	200040c8 	.word	0x200040c8
 80009fc:	200080cc 	.word	0x200080cc
 8000a00:	0800697c 	.word	0x0800697c

08000a04 <wizchip_select>:
                       .sn = {255, 255, 255, 0},
                       .gw = {192, 168, 1, 1},
                       .dns = {0, 0, 0, 0},
                       .dhcp = NETINFO_STATIC };

void wizchip_select(void){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	(W5500_CS_GPIO_Port->BSRR = (uint32_t)W5500_CS_Pin << 16U);
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <wizchip_select+0x18>)
 8000a0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a0e:	619a      	str	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40020800 	.word	0x40020800

08000a20 <wizchip_deselect>:

void wizchip_deselect(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	(W5500_CS_GPIO_Port->BSRR = W5500_CS_Pin);
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <wizchip_deselect+0x14>)
 8000a26:	2240      	movs	r2, #64	; 0x40
 8000a28:	619a      	str	r2, [r3, #24]
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40020800 	.word	0x40020800

08000a38 <wizchip_reset>:

void wizchip_reset(void){
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	(W5500_RST_GPIO_Port->BSRR = (uint32_t)W5500_RST_Pin << 16U);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <wizchip_reset+0x1c>)
 8000a3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a42:	619a      	str	r2, [r3, #24]
	(W5500_RST_GPIO_Port->BSRR = W5500_RST_Pin);
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <wizchip_reset+0x1c>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	619a      	str	r2, [r3, #24]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40020800 	.word	0x40020800

08000a58 <wizchip_writebyte>:

void wizchip_writebyte(uint8_t wb){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    uint8_t rb;
    spi_dma_completed = false;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <wizchip_writebyte+0x3c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, &wb, &rb, 1);
 8000a68:	f107 020f 	add.w	r2, r7, #15
 8000a6c:	1df9      	adds	r1, r7, #7
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <wizchip_writebyte+0x40>)
 8000a72:	f003 fb1b 	bl	80040ac <HAL_SPI_TransmitReceive_DMA>
    while (!spi_dma_completed);
 8000a76:	bf00      	nop
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <wizchip_writebyte+0x3c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f083 0301 	eor.w	r3, r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f7      	bne.n	8000a78 <wizchip_writebyte+0x20>
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200040c4 	.word	0x200040c4
 8000a98:	2000c0d0 	.word	0x2000c0d0

08000a9c <wizchip_readbyte>:

uint8_t wizchip_readbyte(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
    uint8_t rb = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t wb = 0xFF;
 8000aa6:	23ff      	movs	r3, #255	; 0xff
 8000aa8:	71bb      	strb	r3, [r7, #6]
    spi_dma_completed = false;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <wizchip_readbyte+0x3c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, &wb, &rb, 1);
 8000ab0:	1dfa      	adds	r2, r7, #7
 8000ab2:	1db9      	adds	r1, r7, #6
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <wizchip_readbyte+0x40>)
 8000ab8:	f003 faf8 	bl	80040ac <HAL_SPI_TransmitReceive_DMA>
    while (!spi_dma_completed);
 8000abc:	bf00      	nop
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <wizchip_readbyte+0x3c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f7      	bne.n	8000abe <wizchip_readbyte+0x22>
    return rb;
 8000ace:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200040c4 	.word	0x200040c4
 8000adc:	2000c0d0 	.word	0x2000c0d0

08000ae0 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
    spi_dma_completed = false;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <wizchip_readburst+0x3c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, spi_tx_buf, pBuf, len);
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	490a      	ldr	r1, [pc, #40]	; (8000b20 <wizchip_readburst+0x40>)
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <wizchip_readburst+0x44>)
 8000afa:	f003 fad7 	bl	80040ac <HAL_SPI_TransmitReceive_DMA>
    while (!spi_dma_completed);
 8000afe:	bf00      	nop
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <wizchip_readburst+0x3c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f083 0301 	eor.w	r3, r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f7      	bne.n	8000b00 <wizchip_readburst+0x20>
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200040c4 	.word	0x200040c4
 8000b20:	200000c4 	.word	0x200000c4
 8000b24:	2000c0d0 	.word	0x2000c0d0

08000b28 <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
    spi_dma_completed = false;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <wizchip_writeburst+0x3c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, pBuf, spi_rx_buf, len);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <wizchip_writeburst+0x40>)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <wizchip_writeburst+0x44>)
 8000b42:	f003 fab3 	bl	80040ac <HAL_SPI_TransmitReceive_DMA>
    while (!spi_dma_completed);
 8000b46:	bf00      	nop
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <wizchip_writeburst+0x3c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f083 0301 	eor.w	r3, r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f7      	bne.n	8000b48 <wizchip_writeburst+0x20>
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200040c4 	.word	0x200040c4
 8000b68:	200020c4 	.word	0x200020c4
 8000b6c:	2000c0d0 	.word	0x2000c0d0

08000b70 <tcp_server_init>:

void tcp_server_init() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    if(stat = socket(0, Sn_MR_TCP, 5000, 0) == 0)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fbcb 	bl	8001318 <socket>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf0c      	ite	eq
 8000b88:	2301      	moveq	r3, #1
 8000b8a:	2300      	movne	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <tcp_server_init+0xb0>)
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <tcp_server_init+0xb0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <tcp_server_init+0x32>
    	UART_SendString("Socket init success\r\n");
 8000b9c:	4821      	ldr	r0, [pc, #132]	; (8000c24 <tcp_server_init+0xb4>)
 8000b9e:	f7ff fd35 	bl	800060c <UART_SendString>
    if(stat = getSn_SR(0)== SOCK_INIT)
 8000ba2:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000ba6:	f001 f917 	bl	8001dd8 <WIZCHIP_READ>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b13      	cmp	r3, #19
 8000bae:	bf0c      	ite	eq
 8000bb0:	2301      	moveq	r3, #1
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <tcp_server_init+0xb0>)
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <tcp_server_init+0xb0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <tcp_server_init+0x5a>
    	UART_SendString("Socket open success\r\n");
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <tcp_server_init+0xb8>)
 8000bc6:	f7ff fd21 	bl	800060c <UART_SendString>
    if(stat = listen(0) == SOCK_OK)
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fd26 	bl	800161c <listen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <tcp_server_init+0xb0>)
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <tcp_server_init+0xb0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d006      	beq.n	8000bf8 <tcp_server_init+0x88>
    	UART_SendString("Listen socket success\r\n");
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <tcp_server_init+0xbc>)
 8000bec:	f7ff fd0e 	bl	800060c <UART_SendString>
    while(getSn_SR(0) == SOCK_LISTEN)
 8000bf0:	e002      	b.n	8000bf8 <tcp_server_init+0x88>
        {
    			HAL_Delay(0);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f001 fe72 	bl	80028dc <HAL_Delay>
    while(getSn_SR(0) == SOCK_LISTEN)
 8000bf8:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000bfc:	f001 f8ec 	bl	8001dd8 <WIZCHIP_READ>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b14      	cmp	r3, #20
 8000c04:	d0f5      	beq.n	8000bf2 <tcp_server_init+0x82>
        }
    if(getSn_SR(0) == SOCK_ESTABLISHED){
 8000c06:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000c0a:	f001 f8e5 	bl	8001dd8 <WIZCHIP_READ>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b17      	cmp	r3, #23
 8000c12:	d102      	bne.n	8000c1a <tcp_server_init+0xaa>
    	UART_SendString("Input connection\r\n");
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <tcp_server_init+0xc0>)
 8000c16:	f7ff fcf9 	bl	800060c <UART_SendString>
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000c0 	.word	0x200000c0
 8000c24:	08006984 	.word	0x08006984
 8000c28:	0800699c 	.word	0x0800699c
 8000c2c:	080069b4 	.word	0x080069b4
 8000c30:	080069cc 	.word	0x080069cc

08000c34 <tcp_send>:

void tcp_send(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
    uint32_t current_page = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    uint32_t success_count = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
    static uint8_t initialized = 0;
    if(!initialized){
 8000c42:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <tcp_send+0x17c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d113      	bne.n	8000c72 <tcp_send+0x3e>
    	for(uint32_t i = 0; i < WRITE_BUFFER_SIZE; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <tcp_send+0x30>
    		write_buffer[i] = (uint8_t)(i & 0xFF);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	b2d9      	uxtb	r1, r3
 8000c54:	4a57      	ldr	r2, [pc, #348]	; (8000db4 <tcp_send+0x180>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
    	for(uint32_t i = 0; i < WRITE_BUFFER_SIZE; i++) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c6a:	d3f1      	bcc.n	8000c50 <tcp_send+0x1c>
    	}
    	initialized = 1;
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <tcp_send+0x17c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
    }
    if (getSn_SR(0) == SOCK_ESTABLISHED) {
 8000c72:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000c76:	f001 f8af 	bl	8001dd8 <WIZCHIP_READ>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b17      	cmp	r3, #23
 8000c7e:	f040 8091 	bne.w	8000da4 <tcp_send+0x170>
    	while (BUFFER_SIZE > 0) {
    		if(button_pressed_flag){
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <tcp_send+0x184>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <tcp_send+0x64>
    			button_pressed_flag = 0;
 8000c8c:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <tcp_send+0x184>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
    			ReadAllPages();
 8000c92:	f7ff fe53 	bl	800093c <ReadAllPages>
    			return;
 8000c96:	e088      	b.n	8000daa <tcp_send+0x176>
    		}
        	int32_t nbytes = send(0, write_buffer, BUFFER_SIZE);
 8000c98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9c:	4945      	ldr	r1, [pc, #276]	; (8000db4 <tcp_send+0x180>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fd16 	bl	80016d0 <send>
 8000ca4:	60b8      	str	r0, [r7, #8]
        	if (nbytes > 0) {
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	dd74      	ble.n	8000d96 <tcp_send+0x162>
        		//UART_SendString("Sending data and writing to NAND...\r\n");
        		if (current_page >= TOTAL_PAGES) {
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d903      	bls.n	8000cba <tcp_send+0x86>
        			UART_SendString("NAND Flash is full.\r\n");
 8000cb2:	4842      	ldr	r0, [pc, #264]	; (8000dbc <tcp_send+0x188>)
 8000cb4:	f7ff fcaa 	bl	800060c <UART_SendString>
        		    break;
 8000cb8:	e077      	b.n	8000daa <tcp_send+0x176>
        		}
                uint32_t block = current_page / PAGES_PER_BLOCK;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	099b      	lsrs	r3, r3, #6
 8000cbe:	607b      	str	r3, [r7, #4]
                uint32_t page_in_block = current_page % PAGES_PER_BLOCK;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cc6:	603b      	str	r3, [r7, #0]
                if (page_in_block == 0) {
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d108      	bne.n	8000ce0 <tcp_send+0xac>
                    UART_SendString("Erasing Block ");
 8000cce:	483c      	ldr	r0, [pc, #240]	; (8000dc0 <tcp_send+0x18c>)
 8000cd0:	f7ff fc9c 	bl	800060c <UART_SendString>
                    UART_SendNumber(block);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fcbd 	bl	8000654 <UART_SendNumber>
                    //UART_SendString("...\r\n");
                    NAND_EraseBlock(block);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fd74 	bl	80007c8 <NAND_EraseBlock>
                }
                for(uint32_t i = 0; i < WRITE_BUFFER_SIZE; i++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e00d      	b.n	8000d02 <tcp_send+0xce>
                	write_buffer[i] = (uint8_t)((current_page + i) & 0xFF);
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	4a30      	ldr	r2, [pc, #192]	; (8000db4 <tcp_send+0x180>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
                for(uint32_t i = 0; i < WRITE_BUFFER_SIZE; i++) {
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d08:	d3ed      	bcc.n	8000ce6 <tcp_send+0xb2>
                }
                NAND_WritePage(current_page, 0, write_buffer);
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <tcp_send+0x180>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	69f8      	ldr	r0, [r7, #28]
 8000d10:	f7ff fd8c 	bl	800082c <NAND_WritePage>
            	//UART_SendNumber(block);
                //UART_SendString("\r\n");
                //UART_SendString("Written Data: \n");
                //UART_SendDataHex(write_buffer, WRITE_BUFFER_SIZE);
                for(uint32_t i = 0; i < READ_BUFFER_SIZE; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e00d      	b.n	8000d36 <tcp_send+0x102>
                	read_buffer[i] = (uint8_t)((current_page + i) & 0xFF);
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b2d9      	uxtb	r1, r3
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <tcp_send+0x190>)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
                for(uint32_t i = 0; i < READ_BUFFER_SIZE; i++) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d3c:	d3ed      	bcc.n	8000d1a <tcp_send+0xe6>
                }
                NAND_ReadPage(current_page, 0, read_buffer);
 8000d3e:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <tcp_send+0x190>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	69f8      	ldr	r0, [r7, #28]
 8000d44:	f7ff fdc2 	bl	80008cc <NAND_ReadPage>
                //UART_SendString("Read Data: \n");
                //UART_SendDataHex(read_buffer, READ_BUFFER_SIZE);
                if(memcmp(write_buffer, read_buffer, WRITE_BUFFER_SIZE) != 0) {
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	491d      	ldr	r1, [pc, #116]	; (8000dc4 <tcp_send+0x190>)
 8000d4e:	4819      	ldr	r0, [pc, #100]	; (8000db4 <tcp_send+0x180>)
 8000d50:	f005 f928 	bl	8005fa4 <memcmp>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d009      	beq.n	8000d6e <tcp_send+0x13a>
                	UART_SendString("Data verification FAILED at page ");
 8000d5a:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <tcp_send+0x194>)
 8000d5c:	f7ff fc56 	bl	800060c <UART_SendString>
                    UART_SendNumber(current_page);
 8000d60:	69f8      	ldr	r0, [r7, #28]
 8000d62:	f7ff fc77 	bl	8000654 <UART_SendNumber>
                    UART_SendString("\r\n");
 8000d66:	4819      	ldr	r0, [pc, #100]	; (8000dcc <tcp_send+0x198>)
 8000d68:	f7ff fc50 	bl	800060c <UART_SendString>
 8000d6c:	e002      	b.n	8000d74 <tcp_send+0x140>
                } else {
                	//UART_SendString("Data verification PASSED\r\n");
                	//UART_SendNumber(block);
                    success_count++;
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
                }
                current_page++;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
                if(current_page >= TOTAL_PAGES) {
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d906      	bls.n	8000d8e <tcp_send+0x15a>
                	UART_SendString("All pages written and verified. Restarting.\r\n");
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <tcp_send+0x19c>)
 8000d82:	f7ff fc43 	bl	800060c <UART_SendString>
                	current_page = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
                	success_count = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
                }
                //UART_SendString("Success Count: ");
                UART_SendNumber(success_count);
 8000d8e:	69b8      	ldr	r0, [r7, #24]
 8000d90:	f7ff fc60 	bl	8000654 <UART_SendNumber>
 8000d94:	e775      	b.n	8000c82 <tcp_send+0x4e>
                //UART_SendString("\r\n");
        	}
        	else {
        		close(0);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 fbd2 	bl	8001540 <close>
        		UART_SendString("Socket closed.\r\n\n");
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <tcp_send+0x1a0>)
 8000d9e:	f7ff fc35 	bl	800060c <UART_SendString>
                break;
 8000da2:	e002      	b.n	8000daa <tcp_send+0x176>
        	}
    	}
    }
    else {
        UART_SendString("Socket not established.\r\n");
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <tcp_send+0x1a4>)
 8000da6:	f7ff fc31 	bl	800060c <UART_SendString>
    }
}
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000c398 	.word	0x2000c398
 8000db4:	200040cc 	.word	0x200040cc
 8000db8:	2000c0cc 	.word	0x2000c0cc
 8000dbc:	080069e0 	.word	0x080069e0
 8000dc0:	080069f8 	.word	0x080069f8
 8000dc4:	200080cc 	.word	0x200080cc
 8000dc8:	08006a08 	.word	0x08006a08
 8000dcc:	080068ec 	.word	0x080068ec
 8000dd0:	08006a2c 	.word	0x08006a2c
 8000dd4:	08006a5c 	.word	0x08006a5c
 8000dd8:	08006a70 	.word	0x08006a70

08000ddc <w5500_init>:

void w5500_init() {
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
  wizchip_reset();
 8000de2:	f7ff fe29 	bl	8000a38 <wizchip_reset>
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000de6:	4912      	ldr	r1, [pc, #72]	; (8000e30 <w5500_init+0x54>)
 8000de8:	4812      	ldr	r0, [pc, #72]	; (8000e34 <w5500_init+0x58>)
 8000dea:	f001 fa59 	bl	80022a0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_readbyte, wizchip_writebyte);
 8000dee:	4912      	ldr	r1, [pc, #72]	; (8000e38 <w5500_init+0x5c>)
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <w5500_init+0x60>)
 8000df2:	f001 fa7b 	bl	80022ec <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8000df6:	4912      	ldr	r1, [pc, #72]	; (8000e40 <w5500_init+0x64>)
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <w5500_init+0x68>)
 8000dfa:	f001 faa3 	bl	8002344 <reg_wizchip_spiburst_cbfunc>
  uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <w5500_init+0x6c>)
 8000e00:	463c      	mov	r4, r7
 8000e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  wizchip_init(memsize, memsize);
 8000e08:	463a      	mov	r2, r7
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fb4e 	bl	80024b0 <wizchip_init>
  wizchip_setnetinfo(&netInfo);
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <w5500_init+0x70>)
 8000e16:	f001 fbd7 	bl	80025c8 <wizchip_setnetinfo>
  ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
 8000e1a:	490c      	ldr	r1, [pc, #48]	; (8000e4c <w5500_init+0x70>)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f001 fabd 	bl	800239c <ctlnetwork>
  HAL_Delay(10);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f001 fd5a 	bl	80028dc <HAL_Delay>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	08000a21 	.word	0x08000a21
 8000e34:	08000a05 	.word	0x08000a05
 8000e38:	08000a59 	.word	0x08000a59
 8000e3c:	08000a9d 	.word	0x08000a9d
 8000e40:	08000b29 	.word	0x08000b29
 8000e44:	08000ae1 	.word	0x08000ae1
 8000e48:	08006a8c 	.word	0x08006a8c
 8000e4c:	20000000 	.word	0x20000000

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f001 fcd0 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f824 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f000 f9aa 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e60:	f000 f92c 	bl	80010bc <MX_DMA_Init>
  MX_SPI2_Init();
 8000e64:	f000 f87e 	bl	8000f64 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e68:	f000 f8b2 	bl	8000fd0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e6c:	f000 f8fc 	bl	8001068 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	w5500_init();
 8000e70:	f7ff ffb4 	bl	8000ddc <w5500_init>
	tcp_server_init();
 8000e74:	f7ff fe7c 	bl	8000b70 <tcp_server_init>
	tcp_send();
 8000e78:	f7ff fedc 	bl	8000c34 <tcp_send>
	while(!button_pressed_flag){
 8000e7c:	e002      	b.n	8000e84 <main+0x34>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fd2c 	bl	80028dc <HAL_Delay>
	while(!button_pressed_flag){
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <main+0x50>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f7      	beq.n	8000e7e <main+0x2e>
	}
	button_pressed_flag = 0;
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <main+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
	ReadAllPages();
 8000e94:	f7ff fd52 	bl	800093c <ReadAllPages>
	HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f001 fd1f 	bl	80028dc <HAL_Delay>
	w5500_init();
 8000e9e:	e7e7      	b.n	8000e70 <main+0x20>
 8000ea0:	2000c0cc 	.word	0x2000c0cc

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 f886 	bl	8005fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <SystemClock_Config+0xb8>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <SystemClock_Config+0xb8>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <SystemClock_Config+0xb8>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <SystemClock_Config+0xbc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <SystemClock_Config+0xbc>)
 8000ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <SystemClock_Config+0xbc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fbe5 	bl	80036e8 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f24:	f000 f9f2 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fe48 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f4e:	f000 f9dd 	bl	800130c <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	; 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <MX_SPI2_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fb6:	f002 ffef 	bl	8003f98 <HAL_SPI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc0:	f000 f9a4 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000c0d0 	.word	0x2000c0d0
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM2_Init+0x94>)
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM2_Init+0x94>)
 8001002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_TIM2_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM2_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <MX_TIM2_Init+0x94>)
 8001016:	f003 fc8d 	bl	8004934 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001020:	f000 f974 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_TIM2_Init+0x94>)
 8001032:	f003 fcce 	bl	80049d2 <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800103c:	f000 f966 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM2_Init+0x94>)
 800104e:	f003 fead 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 f958 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000c1e8 	.word	0x2000c1e8

08001068 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_USART2_UART_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 80010a0:	f003 fef2 	bl	8004e88 <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f92f 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000c230 	.word	0x2000c230
 80010b8:	40004400 	.word	0x40004400

080010bc <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <MX_DMA_Init+0xec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a37      	ldr	r2, [pc, #220]	; (80011a8 <MX_DMA_Init+0xec>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <MX_DMA_Init+0xec>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MX_DMA_Init+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <MX_DMA_Init+0xec>)
 80010e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <MX_DMA_Init+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_DMA_Init+0xf0>)
 80010fc:	4a2c      	ldr	r2, [pc, #176]	; (80011b0 <MX_DMA_Init+0xf4>)
 80010fe:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <MX_DMA_Init+0xf0>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_DMA_Init+0xf0>)
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_DMA_Init+0xf0>)
 800110e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001112:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_DMA_Init+0xf0>)
 8001116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_DMA_Init+0xf0>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_DMA_Init+0xf0>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_DMA_Init+0xf0>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_DMA_Init+0xf0>)
 8001130:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001134:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_DMA_Init+0xf0>)
 8001138:	2204      	movs	r2, #4
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_DMA_Init+0xf0>)
 800113e:	2203      	movs	r2, #3
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_DMA_Init+0xf0>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_DMA_Init+0xf0>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <MX_DMA_Init+0xf0>)
 8001150:	f001 fcfa 	bl	8002b48 <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_DMA_Init+0xa2>
  {
    Error_Handler( );
 800115a:	f000 f8d7 	bl	800130c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	200e      	movs	r0, #14
 8001164:	f001 fcb9 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001168:	200e      	movs	r0, #14
 800116a:	f001 fcd2 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	200f      	movs	r0, #15
 8001174:	f001 fcb1 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001178:	200f      	movs	r0, #15
 800117a:	f001 fcca 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2010      	movs	r0, #16
 8001184:	f001 fca9 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001188:	2010      	movs	r0, #16
 800118a:	f001 fcc2 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2011      	movs	r0, #17
 8001194:	f001 fca1 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001198:	2011      	movs	r0, #17
 800119a:	f001 fcba 	bl	8002b12 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	2000c338 	.word	0x2000c338
 80011b0:	40026410 	.word	0x40026410

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <MX_GPIO_Init+0x148>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <MX_GPIO_Init+0x148>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b48      	ldr	r3, [pc, #288]	; (80012fc <MX_GPIO_Init+0x148>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <MX_GPIO_Init+0x148>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a43      	ldr	r2, [pc, #268]	; (80012fc <MX_GPIO_Init+0x148>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <MX_GPIO_Init+0x148>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <MX_GPIO_Init+0x148>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <MX_GPIO_Init+0x148>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <MX_GPIO_Init+0x148>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <MX_GPIO_Init+0x148>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <MX_GPIO_Init+0x148>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <MX_GPIO_Init+0x148>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CLE_Pin|FLASH_ALE_Pin|FLASH_RE_Pin|FLASH_WE_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8001240:	482f      	ldr	r0, [pc, #188]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001242:	f002 fa1f 	bl	8003684 <HAL_GPIO_WritePin>
                          |FLASH_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001246:	2200      	movs	r2, #0
 8001248:	21ff      	movs	r1, #255	; 0xff
 800124a:	482e      	ldr	r0, [pc, #184]	; (8001304 <MX_GPIO_Init+0x150>)
 800124c:	f002 fa1a 	bl	8003684 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	21c0      	movs	r1, #192	; 0xc0
 8001254:	482c      	ldr	r0, [pc, #176]	; (8001308 <MX_GPIO_Init+0x154>)
 8001256:	f002 fa15 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001260:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4825      	ldr	r0, [pc, #148]	; (8001308 <MX_GPIO_Init+0x154>)
 8001272:	f002 f86b 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CLE_Pin FLASH_ALE_Pin FLASH_RE_Pin FLASH_WE_Pin
                           FLASH_CE_Pin */
  GPIO_InitStruct.Pin = FLASH_CLE_Pin|FLASH_ALE_Pin|FLASH_RE_Pin|FLASH_WE_Pin
 8001276:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 800127a:	617b      	str	r3, [r7, #20]
                          |FLASH_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	481c      	ldr	r0, [pc, #112]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001290:	f002 f85c 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RB_Pin */
  GPIO_InitStruct.Pin = FLASH_RB_Pin;
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_RB_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_GPIO_Init+0x14c>)
 80012a8:	f002 f850 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80012ac:	23ff      	movs	r3, #255	; 0xff
 80012ae:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	; (8001304 <MX_GPIO_Init+0x150>)
 80012c4:	f002 f842 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_CS_Pin W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin|W5500_RST_Pin;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <MX_GPIO_Init+0x154>)
 80012e0:	f002 f834 	bl	800334c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2102      	movs	r1, #2
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f001 fbf6 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f001 fc0f 	bl	8002b12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	4603      	mov	r3, r0
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	460b      	mov	r3, r1
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d902      	bls.n	8001342 <socket+0x2a>
 800133c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001340:	e0f0      	b.n	8001524 <socket+0x20c>
	switch(protocol)
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d005      	beq.n	8001354 <socket+0x3c>
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd11      	ble.n	8001370 <socket+0x58>
 800134c:	3b02      	subs	r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d80e      	bhi.n	8001370 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001352:	e011      	b.n	8001378 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2204      	movs	r2, #4
 800135a:	4619      	mov	r1, r3
 800135c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001360:	f000 fdd4 	bl	8001f0c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d105      	bne.n	8001376 <socket+0x5e>
 800136a:	f06f 0302 	mvn.w	r3, #2
 800136e:	e0d9      	b.n	8001524 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001370:	f06f 0304 	mvn.w	r3, #4
 8001374:	e0d6      	b.n	8001524 <socket+0x20c>
	    break;
 8001376:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <socket+0x70>
 8001382:	f06f 0305 	mvn.w	r3, #5
 8001386:	e0cd      	b.n	8001524 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d028      	beq.n	80013e0 <socket+0xc8>
	{
   	switch(protocol)
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <socket+0x82>
 8001394:	2b02      	cmp	r3, #2
 8001396:	d008      	beq.n	80013aa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001398:	e022      	b.n	80013e0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11a      	bne.n	80013da <socket+0xc2>
 80013a4:	f06f 0305 	mvn.w	r3, #5
 80013a8:	e0bc      	b.n	8001524 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80013b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db02      	blt.n	80013c2 <socket+0xaa>
 80013bc:	f06f 0305 	mvn.w	r3, #5
 80013c0:	e0b0      	b.n	8001524 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80013cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db04      	blt.n	80013de <socket+0xc6>
 80013d4:	f06f 0305 	mvn.w	r3, #5
 80013d8:	e0a4      	b.n	8001524 <socket+0x20c>
   	      break;
 80013da:	bf00      	nop
 80013dc:	e000      	b.n	80013e0 <socket+0xc8>
   	      break;
 80013de:	bf00      	nop
   	}
   }
	close(sn);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f8ac 	bl	8001540 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	3301      	adds	r3, #1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f6:	f023 030f 	bic.w	r3, r3, #15
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	f000 fd32 	bl	8001e70 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d110      	bne.n	8001434 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001412:	4b46      	ldr	r3, [pc, #280]	; (800152c <socket+0x214>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	b291      	uxth	r1, r2
 800141a:	4a44      	ldr	r2, [pc, #272]	; (800152c <socket+0x214>)
 800141c:	8011      	strh	r1, [r2, #0]
 800141e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <socket+0x214>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001428:	4293      	cmp	r3, r2
 800142a:	d103      	bne.n	8001434 <socket+0x11c>
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <socket+0x214>)
 800142e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001432:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	3301      	adds	r3, #1
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001440:	461a      	mov	r2, r3
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f000 fd0f 	bl	8001e70 <WIZCHIP_WRITE>
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	3301      	adds	r3, #1
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145e:	461a      	mov	r2, r3
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f000 fd02 	bl	8001e70 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	3301      	adds	r3, #1
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fcf8 	bl	8001e70 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001480:	bf00      	nop
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	3301      	adds	r3, #1
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fca2 	bl	8001dd8 <WIZCHIP_READ>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2201      	movs	r2, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <socket+0x218>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <socket+0x218>)
 80014b6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <socket+0x218>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <socket+0x218>)
 80014d4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2201      	movs	r2, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <socket+0x21c>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4013      	ands	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <socket+0x21c>)
 80014f2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <socket+0x220>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <socket+0x224>)
 8001502:	2100      	movs	r1, #0
 8001504:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001506:	bf00      	nop
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	3301      	adds	r3, #1
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fc5f 	bl	8001dd8 <WIZCHIP_READ>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f3      	beq.n	8001508 <socket+0x1f0>
   return (int8_t)sn;
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	20000018 	.word	0x20000018
 8001530:	2000c39a 	.word	0x2000c39a
 8001534:	2000c39c 	.word	0x2000c39c
 8001538:	2000c3a0 	.word	0x2000c3a0
 800153c:	2000c3b0 	.word	0x2000c3b0

08001540 <close>:

int8_t close(uint8_t sn)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d902      	bls.n	8001556 <close+0x16>
 8001550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001554:	e055      	b.n	8001602 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	3301      	adds	r3, #1
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fc83 	bl	8001e70 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800156a:	bf00      	nop
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	3301      	adds	r3, #1
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fc2d 	bl	8001dd8 <WIZCHIP_READ>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f3      	bne.n	800156c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3301      	adds	r3, #1
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001590:	211f      	movs	r1, #31
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fc6c 	bl	8001e70 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <close+0xcc>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4013      	ands	r3, r2
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <close+0xcc>)
 80015b4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2201      	movs	r2, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	b21b      	sxth	r3, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <close+0xd0>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <close+0xd0>)
 80015d2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <close+0xd4>)
 80015d8:	2100      	movs	r1, #0
 80015da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <close+0xd8>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80015e6:	bf00      	nop
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	3301      	adds	r3, #1
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fbef 	bl	8001dd8 <WIZCHIP_READ>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f3      	bne.n	80015e8 <close+0xa8>
	return SOCK_OK;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000c39a 	.word	0x2000c39a
 8001610:	2000c39c 	.word	0x2000c39c
 8001614:	2000c3a0 	.word	0x2000c3a0
 8001618:	2000c3b0 	.word	0x2000c3b0

0800161c <listen>:

int8_t listen(uint8_t sn)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d902      	bls.n	8001632 <listen+0x16>
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001630:	e049      	b.n	80016c6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3301      	adds	r3, #1
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fbcc 	bl	8001dd8 <WIZCHIP_READ>
 8001640:	4603      	mov	r3, r0
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	2b01      	cmp	r3, #1
 8001648:	d002      	beq.n	8001650 <listen+0x34>
 800164a:	f06f 0304 	mvn.w	r3, #4
 800164e:	e03a      	b.n	80016c6 <listen+0xaa>
	CHECK_SOCKINIT();
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	3301      	adds	r3, #1
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fbbb 	bl	8001dd8 <WIZCHIP_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	2b13      	cmp	r3, #19
 8001666:	d002      	beq.n	800166e <listen+0x52>
 8001668:	f06f 0302 	mvn.w	r3, #2
 800166c:	e02b      	b.n	80016c6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	3301      	adds	r3, #1
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800167a:	2102      	movs	r1, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fbf7 	bl	8001e70 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001682:	bf00      	nop
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	3301      	adds	r3, #1
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fba1 	bl	8001dd8 <WIZCHIP_READ>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f3      	bne.n	8001684 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800169c:	e006      	b.n	80016ac <listen+0x90>
   {
         close(sn);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff4d 	bl	8001540 <close>
         return SOCKERR_SOCKCLOSED;
 80016a6:	f06f 0303 	mvn.w	r3, #3
 80016aa:	e00c      	b.n	80016c6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3301      	adds	r3, #1
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fb8d 	bl	8001dd8 <WIZCHIP_READ>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b14      	cmp	r3, #20
 80016c2:	d1ec      	bne.n	800169e <listen+0x82>
   }
   return SOCK_OK;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d902      	bls.n	80016f4 <send+0x24>
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	e0de      	b.n	80018b2 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	3301      	adds	r3, #1
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fb6b 	bl	8001dd8 <WIZCHIP_READ>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	2b01      	cmp	r3, #1
 800170a:	d002      	beq.n	8001712 <send+0x42>
 800170c:	f06f 0304 	mvn.w	r3, #4
 8001710:	e0cf      	b.n	80018b2 <send+0x1e2>
   CHECK_SOCKDATA();
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <send+0x4e>
 8001718:	f06f 030d 	mvn.w	r3, #13
 800171c:	e0c9      	b.n	80018b2 <send+0x1e2>
   tmp = getSn_SR(sn);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	3301      	adds	r3, #1
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fb54 	bl	8001dd8 <WIZCHIP_READ>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b17      	cmp	r3, #23
 8001738:	d005      	beq.n	8001746 <send+0x76>
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b1c      	cmp	r3, #28
 800173e:	d002      	beq.n	8001746 <send+0x76>
 8001740:	f06f 0306 	mvn.w	r3, #6
 8001744:	e0b5      	b.n	80018b2 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <send+0x1ec>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	fa42 f303 	asr.w	r3, r2, r3
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d039      	beq.n	80017ce <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3301      	adds	r3, #1
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fb36 	bl	8001dd8 <WIZCHIP_READ>
 800176c:	4603      	mov	r3, r0
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d019      	beq.n	80017b2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	3301      	adds	r3, #1
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800178a:	2110      	movs	r1, #16
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fb6f 	bl	8001e70 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2201      	movs	r2, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	b21b      	sxth	r3, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <send+0x1ec>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <send+0x1ec>)
 80017ae:	801a      	strh	r2, [r3, #0]
 80017b0:	e00d      	b.n	80017ce <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <send+0xfa>
      {
         close(sn);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff febe 	bl	8001540 <close>
         return SOCKERR_TIMEOUT;
 80017c4:	f06f 030c 	mvn.w	r3, #12
 80017c8:	e073      	b.n	80018b2 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e071      	b.n	80018b2 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3301      	adds	r3, #1
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fafc 	bl	8001dd8 <WIZCHIP_READ>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	029b      	lsls	r3, r3, #10
 80017e6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80017e8:	88ba      	ldrh	r2, [r7, #4]
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d901      	bls.n	80017f4 <send+0x124>
 80017f0:	89bb      	ldrh	r3, [r7, #12]
 80017f2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fc48 	bl	800208c <getSn_TX_FSR>
 80017fc:	4603      	mov	r3, r0
 80017fe:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	3301      	adds	r3, #1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fae3 	bl	8001dd8 <WIZCHIP_READ>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2b17      	cmp	r3, #23
 800181a:	d009      	beq.n	8001830 <send+0x160>
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b1c      	cmp	r3, #28
 8001820:	d006      	beq.n	8001830 <send+0x160>
      {
         close(sn);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe8b 	bl	8001540 <close>
         return SOCKERR_SOCKSTATUS;
 800182a:	f06f 0306 	mvn.w	r3, #6
 800182e:	e040      	b.n	80018b2 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <send+0x1f0>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	fa42 f303 	asr.w	r3, r2, r3
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <send+0x180>
 8001844:	88ba      	ldrh	r2, [r7, #4]
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d901      	bls.n	8001850 <send+0x180>
 800184c:	2300      	movs	r3, #0
 800184e:	e030      	b.n	80018b2 <send+0x1e2>
      if(len <= freesize) break;
 8001850:	88ba      	ldrh	r2, [r7, #4]
 8001852:	89bb      	ldrh	r3, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d900      	bls.n	800185a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001858:	e7cc      	b.n	80017f4 <send+0x124>
      if(len <= freesize) break;
 800185a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800185c:	88ba      	ldrh	r2, [r7, #4]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fc5d 	bl	8002122 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	3301      	adds	r3, #1
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001874:	2120      	movs	r1, #32
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fafa 	bl	8001e70 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800187c:	bf00      	nop
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	3301      	adds	r3, #1
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800188a:	4618      	mov	r0, r3
 800188c:	f000 faa4 	bl	8001dd8 <WIZCHIP_READ>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f3      	bne.n	800187e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2201      	movs	r2, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	b21a      	sxth	r2, r3
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <send+0x1ec>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <send+0x1ec>)
 80018ae:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80018b0:	88bb      	ldrh	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000c39c 	.word	0x2000c39c
 80018c0:	2000c39a 	.word	0x2000c39a

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a5b      	ldr	r2, [pc, #364]	; (8001aa0 <HAL_SPI_MspInit+0x18c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	f040 80af 	bne.w	8001a96 <HAL_SPI_MspInit+0x182>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <HAL_SPI_MspInit+0x190>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800198c:	230c      	movs	r3, #12
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800199c:	2305      	movs	r3, #5
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4840      	ldr	r0, [pc, #256]	; (8001aa8 <HAL_SPI_MspInit+0x194>)
 80019a8:	f001 fcd0 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019be:	2305      	movs	r3, #5
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4838      	ldr	r0, [pc, #224]	; (8001aac <HAL_SPI_MspInit+0x198>)
 80019ca:	f001 fcbf 	bl	800334c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019d0:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <HAL_SPI_MspInit+0x1a0>)
 80019d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ec:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 8001a02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a06:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a0e:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 8001a10:	f001 f89a 	bl	8002b48 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001a1a:	f7ff fc77 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 8001a22:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_SPI_MspInit+0x19c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_SPI_MspInit+0x1a8>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a6a:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a6c:	f001 f86c 	bl	8002b48 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8001a76:	f7ff fc49 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a7e:	649a      	str	r2, [r3, #72]	; 0x48
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <HAL_SPI_MspInit+0x1a4>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2024      	movs	r0, #36	; 0x24
 8001a8c:	f001 f825 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a90:	2024      	movs	r0, #36	; 0x24
 8001a92:	f001 f83e 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40003800 	.word	0x40003800
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	2000c128 	.word	0x2000c128
 8001ab4:	40026058 	.word	0x40026058
 8001ab8:	2000c188 	.word	0x2000c188
 8001abc:	40026070 	.word	0x40026070

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad0:	d10d      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	; (8001c50 <HAL_UART_MspInit+0x150>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f040 8092 	bne.w	8001c48 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a42      	ldr	r2, [pc, #264]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_UART_MspInit+0x154>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	4838      	ldr	r0, [pc, #224]	; (8001c58 <HAL_UART_MspInit+0x158>)
 8001b78:	f001 fbe8 	bl	800334c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001b7e:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <HAL_UART_MspInit+0x160>)
 8001b80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b82:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001b84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b90:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bb6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bbe:	4827      	ldr	r0, [pc, #156]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bc0:	f000 ffc2 	bl	8002b48 <HAL_DMA_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bca:	f7ff fb9f 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_UART_MspInit+0x15c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_UART_MspInit+0x168>)
 8001bde:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c1e:	f000 ff93 	bl	8002b48 <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001c28:	f7ff fb70 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <HAL_UART_MspInit+0x164>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2026      	movs	r0, #38	; 0x26
 8001c3e:	f000 ff4c 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c42:	2026      	movs	r0, #38	; 0x26
 8001c44:	f000 ff65 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	2000c278 	.word	0x2000c278
 8001c60:	40026088 	.word	0x40026088
 8001c64:	2000c2d8 	.word	0x2000c2d8
 8001c68:	400260a0 	.word	0x400260a0

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 fdf0 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA1_Stream3_IRQHandler+0x10>)
 8001cc6:	f001 f8d7 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000c128 	.word	0x2000c128

08001cd4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA1_Stream4_IRQHandler+0x10>)
 8001cda:	f001 f8cd 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000c188 	.word	0x2000c188

08001ce8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <DMA1_Stream5_IRQHandler+0x10>)
 8001cee:	f001 f8c3 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000c278 	.word	0x2000c278

08001cfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <DMA1_Stream6_IRQHandler+0x10>)
 8001d02:	f001 f8b9 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000c2d8 	.word	0x2000c2d8

08001d10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <SPI2_IRQHandler+0x10>)
 8001d16:	f002 fac3 	bl	80042a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000c0d0 	.word	0x2000c0d0

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f003 f96d 	bl	8005008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000c230 	.word	0x2000c230

08001d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d40:	f001 fcba 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f004 f92c 	bl	8005fd4 <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20018000 	.word	0x20018000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	2000c3b8 	.word	0x2000c3b8
 8001db0:	2000c510 	.word	0x2000c510

08001db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <WIZCHIP_READ+0x24>
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d114      	bne.n	8001e26 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	0c12      	lsrs	r2, r2, #16
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	4610      	mov	r0, r2
 8001e08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	0a12      	lsrs	r2, r2, #8
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4610      	mov	r0, r2
 8001e16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	4610      	mov	r0, r2
 8001e22:	4798      	blx	r3
 8001e24:	e011      	b.n	8001e4a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	2103      	movs	r1, #3
 8001e46:	4610      	mov	r0, r2
 8001e48:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4798      	blx	r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <WIZCHIP_READ+0x94>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	4798      	blx	r3
   return ret;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000020 	.word	0x20000020

08001e70 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d119      	bne.n	8001ecc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	0c12      	lsrs	r2, r2, #16
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4798      	blx	r3
 8001eca:	e013      	b.n	8001ef4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <WIZCHIP_WRITE+0x98>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4798      	blx	r3
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000020 	.word	0x20000020

08001f0c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <WIZCHIP_READ_BUF+0x2a>
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d126      	bne.n	8001f84 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	0c12      	lsrs	r2, r2, #16
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	4610      	mov	r0, r2
 8001f42:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	0a12      	lsrs	r2, r2, #8
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	82fb      	strh	r3, [r7, #22]
 8001f62:	e00a      	b.n	8001f7a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	8afa      	ldrh	r2, [r7, #22]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	188c      	adds	r4, r1, r2
 8001f6e:	4798      	blx	r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001f74:	8afb      	ldrh	r3, [r7, #22]
 8001f76:	3301      	adds	r3, #1
 8001f78:	82fb      	strh	r3, [r7, #22]
 8001f7a:	8afa      	ldrh	r2, [r7, #22]
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3f0      	bcc.n	8001f64 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f82:	e017      	b.n	8001fb4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f107 0210 	add.w	r2, r7, #16
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	68b8      	ldr	r0, [r7, #8]
 8001fb2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <WIZCHIP_READ_BUF+0xbc>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4798      	blx	r3
}
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	20000020 	.word	0x20000020

08001fcc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d126      	bne.n	8002044 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	0c12      	lsrs	r2, r2, #16
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4610      	mov	r0, r2
 8002002:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	0a12      	lsrs	r2, r2, #8
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	4610      	mov	r0, r2
 8002010:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	4610      	mov	r0, r2
 800201c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	82fb      	strh	r3, [r7, #22]
 8002022:	e00a      	b.n	800203a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	8afa      	ldrh	r2, [r7, #22]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	440a      	add	r2, r1
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	4610      	mov	r0, r2
 8002032:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002034:	8afb      	ldrh	r3, [r7, #22]
 8002036:	3301      	adds	r3, #1
 8002038:	82fb      	strh	r3, [r7, #22]
 800203a:	8afa      	ldrh	r2, [r7, #22]
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3f0      	bcc.n	8002024 <WIZCHIP_WRITE_BUF+0x58>
 8002042:	e017      	b.n	8002074 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0c1b      	lsrs	r3, r3, #16
 8002048:	b2db      	uxtb	r3, r3
 800204a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b2db      	uxtb	r3, r3
 8002052:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f107 0210 	add.w	r2, r7, #16
 8002062:	2103      	movs	r1, #3
 8002064:	4610      	mov	r0, r2
 8002066:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	4611      	mov	r1, r2
 8002070:	68b8      	ldr	r0, [r7, #8]
 8002072:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <WIZCHIP_WRITE_BUF+0xbc>)
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	4798      	blx	r3
}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000020 	.word	0x20000020

0800208c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002096:	2300      	movs	r3, #0
 8002098:	81fb      	strh	r3, [r7, #14]
 800209a:	2300      	movs	r3, #0
 800209c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3301      	adds	r3, #1
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fe94 	bl	8001dd8 <WIZCHIP_READ>
 80020b0:	4603      	mov	r3, r0
 80020b2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80020b4:	89bb      	ldrh	r3, [r7, #12]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b29c      	uxth	r4, r3
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	3301      	adds	r3, #1
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fe86 	bl	8001dd8 <WIZCHIP_READ>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4423      	add	r3, r4
 80020d2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3301      	adds	r3, #1
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fe76 	bl	8001dd8 <WIZCHIP_READ>
 80020ec:	4603      	mov	r3, r0
 80020ee:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b29c      	uxth	r4, r3
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	3301      	adds	r3, #1
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe68 	bl	8001dd8 <WIZCHIP_READ>
 8002108:	4603      	mov	r3, r0
 800210a:	b29b      	uxth	r3, r3
 800210c:	4423      	add	r3, r4
 800210e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002110:	89fa      	ldrh	r2, [r7, #14]
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d1c2      	bne.n	800209e <getSn_TX_FSR+0x12>
   return val;
 8002118:	89fb      	ldrh	r3, [r7, #14]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}

08002122 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	6039      	str	r1, [r7, #0]
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	4613      	mov	r3, r2
 8002130:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d048      	beq.n	80021d2 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3301      	adds	r3, #1
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fe43 	bl	8001dd8 <WIZCHIP_READ>
 8002152:	4603      	mov	r3, r0
 8002154:	b29b      	uxth	r3, r3
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b29c      	uxth	r4, r3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	3301      	adds	r3, #1
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe36 	bl	8001dd8 <WIZCHIP_READ>
 800216c:	4603      	mov	r3, r0
 800216e:	b29b      	uxth	r3, r3
 8002170:	4423      	add	r3, r4
 8002172:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	3202      	adds	r2, #2
 800217e:	00d2      	lsls	r2, r2, #3
 8002180:	4413      	add	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	461a      	mov	r2, r3
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	68b8      	ldr	r0, [r7, #8]
 800218c:	f7ff ff1e 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002190:	89fa      	ldrh	r2, [r7, #14]
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3301      	adds	r3, #1
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80021a4:	461a      	mov	r2, r3
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f7ff fe5d 	bl	8001e70 <WIZCHIP_WRITE>
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	3301      	adds	r3, #1
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80021c2:	461a      	mov	r2, r3
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7ff fe50 	bl	8001e70 <WIZCHIP_WRITE>
 80021d0:	e000      	b.n	80021d4 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80021d2:	bf00      	nop
}
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}

080021da <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
 800224e:	2300      	movs	r3, #0
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <reg_wizchip_cs_cbfunc+0x16>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <reg_wizchip_cs_cbfunc+0x40>)
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <reg_wizchip_cs_cbfunc+0x44>)
 80022ba:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <reg_wizchip_cs_cbfunc+0x40>)
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <reg_wizchip_cs_cbfunc+0x48>)
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	e006      	b.n	80022d2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <reg_wizchip_cs_cbfunc+0x40>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <reg_wizchip_cs_cbfunc+0x40>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6193      	str	r3, [r2, #24]
   }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000020 	.word	0x20000020
 80022e4:	080021f7 	.word	0x080021f7
 80022e8:	08002205 	.word	0x08002205

080022ec <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80022f6:	bf00      	nop
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <reg_wizchip_spi_cbfunc+0x4c>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f9      	beq.n	80022f8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <reg_wizchip_spi_cbfunc+0x24>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <reg_wizchip_spi_cbfunc+0x4c>)
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <reg_wizchip_spi_cbfunc+0x50>)
 8002314:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <reg_wizchip_spi_cbfunc+0x4c>)
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <reg_wizchip_spi_cbfunc+0x54>)
 800231a:	621a      	str	r2, [r3, #32]
 800231c:	e006      	b.n	800232c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800231e:	4a06      	ldr	r2, [pc, #24]	; (8002338 <reg_wizchip_spi_cbfunc+0x4c>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <reg_wizchip_spi_cbfunc+0x4c>)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6213      	str	r3, [r2, #32]
   }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000020 	.word	0x20000020
 800233c:	0800224b 	.word	0x0800224b
 8002340:	0800225b 	.word	0x0800225b

08002344 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800234e:	bf00      	nop
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f9      	beq.n	8002350 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <reg_wizchip_spiburst_cbfunc+0x24>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <reg_wizchip_spiburst_cbfunc+0x50>)
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
 8002374:	e006      	b.n	8002384 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	20000020 	.word	0x20000020
 8002394:	08002271 	.word	0x08002271
 8002398:	08002289 	.word	0x08002289

0800239c <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d82c      	bhi.n	8002408 <ctlnetwork+0x6c>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <ctlnetwork+0x18>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023d5 	.word	0x080023d5
 80023bc:	080023dd 	.word	0x080023dd
 80023c0:	080023eb 	.word	0x080023eb
 80023c4:	080023f9 	.word	0x080023f9
 80023c8:	08002401 	.word	0x08002401
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f000 f8fb 	bl	80025c8 <wizchip_setnetinfo>
         break;
 80023d2:	e01c      	b.n	800240e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f000 f937 	bl	8002648 <wizchip_getnetinfo>
         break;
 80023da:	e018      	b.n	800240e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f971 	bl	80026c8 <wizchip_setnetmode>
 80023e6:	4603      	mov	r3, r0
 80023e8:	e012      	b.n	8002410 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80023ea:	f000 f98f 	bl	800270c <wizchip_getnetmode>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
         break;
 80023f6:	e00a      	b.n	800240e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f000 f98f 	bl	800271c <wizchip_settimeout>
         break;
 80023fe:	e006      	b.n	800240e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	f000 f9ac 	bl	800275e <wizchip_gettimeout>
         break;
 8002406:	e002      	b.n	800240e <ctlnetwork+0x72>
      default:
         return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240c:	e000      	b.n	8002410 <ctlnetwork+0x74>
   }
   return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2206      	movs	r2, #6
 8002422:	4619      	mov	r1, r3
 8002424:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002428:	f7ff fd70 	bl	8001f0c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2204      	movs	r2, #4
 8002432:	4619      	mov	r1, r3
 8002434:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002438:	f7ff fd68 	bl	8001f0c <WIZCHIP_READ_BUF>
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002448:	f7ff fd60 	bl	8001f0c <WIZCHIP_READ_BUF>
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2204      	movs	r2, #4
 8002452:	4619      	mov	r1, r3
 8002454:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002458:	f7ff fd58 	bl	8001f0c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff fd06 	bl	8001e70 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fcb7 	bl	8001dd8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2206      	movs	r2, #6
 800246e:	4619      	mov	r1, r3
 8002470:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002474:	f7ff fdaa 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2204      	movs	r2, #4
 800247e:	4619      	mov	r1, r3
 8002480:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002484:	f7ff fda2 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	2204      	movs	r2, #4
 800248e:	4619      	mov	r1, r3
 8002490:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002494:	f7ff fd9a 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2204      	movs	r2, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80024a4:	f7ff fd92 	bl	8001fcc <WIZCHIP_WRITE_BUF>
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80024be:	f7ff ffab 	bl	8002418 <wizchip_sw_reset>
   if(txsize)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03b      	beq.n	8002540 <wizchip_init+0x90>
   {
      tmp = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e015      	b.n	80024fe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	4413      	add	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80024e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	dd02      	ble.n	80024f2 <wizchip_init+0x42>
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f0:	e066      	b.n	80025c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	2b07      	cmp	r3, #7
 8002504:	dde5      	ble.n	80024d2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e015      	b.n	8002538 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	3301      	adds	r3, #1
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800251a:	4618      	mov	r0, r3
 800251c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	f7ff fca2 	bl	8001e70 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253c:	2b07      	cmp	r3, #7
 800253e:	dde5      	ble.n	800250c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d03b      	beq.n	80025be <wizchip_init+0x10e>
   {
      tmp = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e015      	b.n	800257c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	4413      	add	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002566:	2b10      	cmp	r3, #16
 8002568:	dd02      	ble.n	8002570 <wizchip_init+0xc0>
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256e:	e027      	b.n	80025c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002580:	2b07      	cmp	r3, #7
 8002582:	dde5      	ble.n	8002550 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e015      	b.n	80025b6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	3301      	adds	r3, #1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002598:	4618      	mov	r0, r3
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7ff fc63 	bl	8001e70 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	2b07      	cmp	r3, #7
 80025bc:	dde5      	ble.n	800258a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2206      	movs	r2, #6
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80025da:	f7ff fcf7 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	330e      	adds	r3, #14
 80025e2:	2204      	movs	r2, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025ea:	f7ff fcef 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	330a      	adds	r3, #10
 80025f2:	2204      	movs	r2, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80025fa:	f7ff fce7 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3306      	adds	r3, #6
 8002602:	2204      	movs	r2, #4
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800260a:	f7ff fcdf 	bl	8001fcc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7c9a      	ldrb	r2, [r3, #18]
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <wizchip_setnetinfo+0x78>)
 8002614:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7cda      	ldrb	r2, [r3, #19]
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <wizchip_setnetinfo+0x78>)
 800261c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7d1a      	ldrb	r2, [r3, #20]
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <wizchip_setnetinfo+0x78>)
 8002624:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7d5a      	ldrb	r2, [r3, #21]
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <wizchip_setnetinfo+0x78>)
 800262c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7d9a      	ldrb	r2, [r3, #22]
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <wizchip_setnetinfo+0x7c>)
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000c3bc 	.word	0x2000c3bc
 8002644:	2000c3c0 	.word	0x2000c3c0

08002648 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2206      	movs	r2, #6
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800265a:	f7ff fc57 	bl	8001f0c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	330e      	adds	r3, #14
 8002662:	2204      	movs	r2, #4
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800266a:	f7ff fc4f 	bl	8001f0c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	330a      	adds	r3, #10
 8002672:	2204      	movs	r2, #4
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800267a:	f7ff fc47 	bl	8001f0c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3306      	adds	r3, #6
 8002682:	2204      	movs	r2, #4
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800268a:	f7ff fc3f 	bl	8001f0c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <wizchip_getnetinfo+0x78>)
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <wizchip_getnetinfo+0x78>)
 8002698:	785a      	ldrb	r2, [r3, #1]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <wizchip_getnetinfo+0x78>)
 80026a0:	789a      	ldrb	r2, [r3, #2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <wizchip_getnetinfo+0x78>)
 80026a8:	78da      	ldrb	r2, [r3, #3]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <wizchip_getnetinfo+0x7c>)
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	759a      	strb	r2, [r3, #22]
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000c3bc 	.word	0x2000c3bc
 80026c4:	2000c3c0 	.word	0x2000c3c0

080026c8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <wizchip_setnetmode+0x1e>
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e4:	e00e      	b.n	8002704 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff fb76 	bl	8001dd8 <WIZCHIP_READ>
 80026ec:	4603      	mov	r3, r0
 80026ee:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4619      	mov	r1, r3
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff fbb7 	bl	8001e70 <WIZCHIP_WRITE>
   return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff fb61 	bl	8001dd8 <WIZCHIP_READ>
 8002716:	4603      	mov	r3, r0
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}

0800271c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800272e:	f7ff fb9f 	bl	8001e70 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	885b      	ldrh	r3, [r3, #2]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002742:	f7ff fb95 	bl	8001e70 <WIZCHIP_WRITE>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	885b      	ldrh	r3, [r3, #2]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002752:	f7ff fb8d 	bl	8001e70 <WIZCHIP_WRITE>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800275e:	b590      	push	{r4, r7, lr}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002766:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800276a:	f7ff fb35 	bl	8001dd8 <WIZCHIP_READ>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002776:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800277a:	f7ff fb2d 	bl	8001dd8 <WIZCHIP_READ>
 800277e:	4603      	mov	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b29c      	uxth	r4, r3
 8002786:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800278a:	f7ff fb25 	bl	8001dd8 <WIZCHIP_READ>
 800278e:	4603      	mov	r3, r0
 8002790:	b29b      	uxth	r3, r3
 8002792:	4423      	add	r3, r4
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	805a      	strh	r2, [r3, #2]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}
	...

080027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027a8:	f7ff fb04 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ae:	490d      	ldr	r1, [pc, #52]	; (80027e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027d2:	f003 fc05 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d6:	f7fe fb3b 	bl	8000e50 <main>
  bx  lr    
 80027da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80027e8:	08006b00 	.word	0x08006b00
  ldr r2, =_sbss
 80027ec:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80027f0:	2000c510 	.word	0x2000c510

080027f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_Init+0x40>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_Init+0x40>)
 800280e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_Init+0x40>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f000 f94f 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	200f      	movs	r0, #15
 8002828:	f000 f808 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff f84a 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x54>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x58>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f967 	bl	8002b2e <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002878:	f000 f92f 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_InitTick+0x5c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000001c 	.word	0x2000001c
 8002894:	20000050 	.word	0x20000050
 8002898:	2000004c 	.word	0x2000004c

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000050 	.word	0x20000050
 80028c0:	2000c3c4 	.word	0x2000c3c4

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000c3c4 	.word	0x2000c3c4

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000050 	.word	0x20000050

08002924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <__NVIC_EnableIRQ+0x38>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
         );
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d301      	bcc.n	8002a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SysTick_Config+0x40>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa4:	f7ff ff8e 	bl	80029c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SysTick_Config+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SysTick_Config+0x40>)
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff29 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff3e 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ff8e 	bl	8002a18 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff31 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffa2 	bl	8002a80 <SysTick_Config>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff feb6 	bl	80028c4 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e099      	b.n	8002c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b84:	e00f      	b.n	8002ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b86:	f7ff fe9d 	bl	80028c4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d908      	bls.n	8002ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e078      	b.n	8002c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e8      	bne.n	8002b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_DMA_Init+0x158>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d117      	bne.n	8002c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb01 	bl	8003254 <DMA_CheckFifoParam>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c66:	2301      	movs	r3, #1
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fab8 	bl	80031e8 <DMA_CalcBaseAndBitshift>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	223f      	movs	r2, #63	; 0x3f
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	f010803f 	.word	0xf010803f

08002ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Start_IT+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e040      	b.n	8002d4c <HAL_DMA_Start_IT+0xa8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d12f      	bne.n	8002d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa4a 	bl	800318c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	223f      	movs	r2, #63	; 0x3f
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0216 	orr.w	r2, r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e005      	b.n	8002d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d62:	f7ff fdaf 	bl	80028c4 <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e052      	b.n	8002e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0216 	bic.w	r2, r2, #22
 8002d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_DMA_Abort+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0208 	bic.w	r2, r2, #8
 8002dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd6:	e013      	b.n	8002e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd8:	f7ff fd74 	bl	80028c4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d90c      	bls.n	8002e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2203      	movs	r2, #3
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e015      	b.n	8002e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e4      	bne.n	8002dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	223f      	movs	r2, #63	; 0x3f
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00c      	b.n	8002e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2205      	movs	r2, #5
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e84:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_DMA_IRQHandler+0x248>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	; (80030c4 <HAL_DMA_IRQHandler+0x24c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	2201      	movs	r2, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2204      	movs	r2, #4
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2210      	movs	r2, #16
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d043      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2210      	movs	r2, #16
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d024      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e01f      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e016      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0208 	bic.w	r2, r2, #8
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2220      	movs	r2, #32
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 808f 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2220      	movs	r2, #32
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b05      	cmp	r3, #5
 8003020:	d136      	bne.n	8003090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_IRQHandler+0x1da>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07e      	beq.n	8003184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
        }
        return;
 800308e:	e079      	b.n	8003184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01d      	beq.n	80030da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e02c      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
 80030be:	bf00      	nop
 80030c0:	2000001c 	.word	0x2000001c
 80030c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e01e      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d032      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2205      	movs	r2, #5
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d307      	bcc.n	8003160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f2      	bne.n	8003144 <HAL_DMA_IRQHandler+0x2cc>
 800315e:	e000      	b.n	8003162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e000      	b.n	8003186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003184:	bf00      	nop
    }
  }
}
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d108      	bne.n	80031cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ca:	e007      	b.n	80031dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3b10      	subs	r3, #16
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <DMA_CalcBaseAndBitshift+0x64>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <DMA_CalcBaseAndBitshift+0x68>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d909      	bls.n	800322a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58
 8003228:	e007      	b.n	800323a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	aaaaaaab 	.word	0xaaaaaaab
 8003250:	08006ab4 	.word	0x08006ab4

08003254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d856      	bhi.n	8003322 <DMA_CheckFifoParam+0xce>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <DMA_CheckFifoParam+0x28>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329f 	.word	0x0800329f
 8003284:	0800328d 	.word	0x0800328d
 8003288:	08003323 	.word	0x08003323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d046      	beq.n	8003326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e043      	b.n	8003326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a6:	d140      	bne.n	800332a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e03d      	b.n	800332a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d121      	bne.n	80032fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d837      	bhi.n	800332e <DMA_CheckFifoParam+0xda>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <DMA_CheckFifoParam+0x70>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032db 	.word	0x080032db
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	080032ed 	.word	0x080032ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e030      	b.n	800333c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d025      	beq.n	8003332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e022      	b.n	8003332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032fa:	e01c      	b.n	8003336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d903      	bls.n	800330a <DMA_CheckFifoParam+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003308:	e018      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e015      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e00b      	b.n	800333a <DMA_CheckFifoParam+0xe6>
      break;
 8003322:	bf00      	nop
 8003324:	e00a      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e008      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;   
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
    }
  } 
  
  return status; 
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e159      	b.n	800361c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8148 	bne.w	8003616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	2b02      	cmp	r3, #2
 800339c:	d130      	bne.n	8003400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d017      	beq.n	800343c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d123      	bne.n	8003490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a2 	beq.w	8003616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_GPIO_Init+0x2e8>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_GPIO_Init+0x2e8>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <HAL_GPIO_Init+0x2e8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_GPIO_Init+0x2ec>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a49      	ldr	r2, [pc, #292]	; (800363c <HAL_GPIO_Init+0x2f0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x202>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a48      	ldr	r2, [pc, #288]	; (8003640 <HAL_GPIO_Init+0x2f4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x1fe>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <HAL_GPIO_Init+0x2f8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x1fa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a46      	ldr	r2, [pc, #280]	; (8003648 <HAL_GPIO_Init+0x2fc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x1f6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a45      	ldr	r2, [pc, #276]	; (800364c <HAL_GPIO_Init+0x300>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x1f2>
 800353a:	2304      	movs	r3, #4
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800353e:	2307      	movs	r3, #7
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354e:	2300      	movs	r3, #0
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f002 0203 	and.w	r2, r2, #3
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	; (8003638 <HAL_GPIO_Init+0x2ec>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_GPIO_Init+0x304>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a2f      	ldr	r2, [pc, #188]	; (8003650 <HAL_GPIO_Init+0x304>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_GPIO_Init+0x304>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <HAL_GPIO_Init+0x304>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_GPIO_Init+0x304>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e6:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_GPIO_Init+0x304>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b18      	ldr	r3, [pc, #96]	; (8003650 <HAL_GPIO_Init+0x304>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003610:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <HAL_GPIO_Init+0x304>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f aea2 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036a0:	e003      	b.n	80036aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	041a      	lsls	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc ff6e 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e267      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d075      	beq.n	80037f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00c      	beq.n	800372c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b82      	ldr	r3, [pc, #520]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d157      	bne.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e242      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x74>
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6c      	ldr	r2, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 8003780:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7ff f890 	bl	80028c4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7ff f88c 	bl	80028c4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e207      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7ff f87c 	bl	80028c4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7ff f878 	bl	80028c4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1f3      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1c7      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7ff f831 	bl	80028c4 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7ff f82d 	bl	80028c4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1a8      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7ff f810 	bl	80028c4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a8:	f7ff f80c 	bl	80028c4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e187      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fff0 	bl	80028c4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe ffec 	bl	80028c4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e167      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x200>
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe ffd9 	bl	80028c4 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe ffd5 	bl	80028c4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e150      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a7c      	ldr	r2, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d118      	bne.n	80039bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fe ff95 	bl	80028c4 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fe ff91 	bl	80028c4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e10c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2ea>
 80039c4:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a63      	ldr	r2, [pc, #396]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x30c>
 80039da:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a5b      	ldr	r2, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039f4:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a54      	ldr	r2, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fe ff56 	bl	80028c4 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe ff52 	bl	80028c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0cb      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x334>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fe ff40 	bl	80028c4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe ff3c 	bl	80028c4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0b5      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a1 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d05c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d141      	bne.n	8003b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe ff10 	bl	80028c4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe ff0c 	bl	80028c4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e087      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe fee5 	bl	80028c4 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe fee1 	bl	80028c4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e05c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x416>
 8003b1c:	e054      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe fece 	bl	80028c4 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe feca 	bl	80028c4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e045      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x444>
 8003b4a:	e03d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e038      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cc      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b68      	ldr	r3, [pc, #416]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90c      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d044      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e067      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fe fdfc 	bl	80028c4 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fe fdf8 	bl	80028c4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d20c      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fd5c 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00
 8003d94:	40023800 	.word	0x40023800
 8003d98:	08006a9c 	.word	0x08006a9c
 8003d9c:	2000001c 	.word	0x2000001c
 8003da0:	2000004c 	.word	0x2000004c

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b090      	sub	sp, #64	; 0x40
 8003daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	2300      	movs	r3, #0
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db4:	2300      	movs	r3, #0
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	f200 80a1 	bhi.w	8003f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd6:	e09b      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ddc:	e09b      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dde:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003de2:	e098      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de4:	4b4f      	ldr	r3, [pc, #316]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d028      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	2200      	movs	r2, #0
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	627a      	str	r2, [r7, #36]	; 0x24
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e10:	fb03 f201 	mul.w	r2, r3, r1
 8003e14:	2300      	movs	r3, #0
 8003e16:	fb00 f303 	mul.w	r3, r0, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a43      	ldr	r2, [pc, #268]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e24:	460a      	mov	r2, r1
 8003e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	4413      	add	r3, r2
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	2200      	movs	r2, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	61fa      	str	r2, [r7, #28]
 8003e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e3e:	f7fc fa27 	bl	8000290 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4613      	mov	r3, r2
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4a:	e053      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	2200      	movs	r2, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	617a      	str	r2, [r7, #20]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e5e:	f04f 0b00 	mov.w	fp, #0
 8003e62:	4652      	mov	r2, sl
 8003e64:	465b      	mov	r3, fp
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e96:	ebb2 0408 	subs.w	r4, r2, r8
 8003e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	00eb      	lsls	r3, r5, #3
 8003ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eac:	00e2      	lsls	r2, r4, #3
 8003eae:	4614      	mov	r4, r2
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	eb14 030a 	adds.w	r3, r4, sl
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	eb45 030b 	adc.w	r3, r5, fp
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee8:	f7fc f9d2 	bl	8000290 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3740      	adds	r7, #64	; 0x40
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400
 8003f2c:	017d7840 	.word	0x017d7840

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000001c 	.word	0x2000001c

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	f7ff fff0 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	08006aac 	.word	0x08006aac

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f74:	f7ff ffdc 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0b5b      	lsrs	r3, r3, #13
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4903      	ldr	r1, [pc, #12]	; (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40023800 	.word	0x40023800
 8003f94:	08006aac 	.word	0x08006aac

08003f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07b      	b.n	80040a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fba:	d009      	beq.n	8003fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]
 8003fc2:	e005      	b.n	8003fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fc92 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	ea42 0103 	orr.w	r1, r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0104 	and.w	r1, r3, #4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0210 	and.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_SPI_TransmitReceive_DMA+0x20>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0db      	b.n	8004284 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80040e2:	7dbb      	ldrb	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d00d      	beq.n	8004104 <HAL_SPI_TransmitReceive_DMA+0x58>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d106      	bne.n	80040fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_SPI_TransmitReceive_DMA+0x52>
 80040f8:	7dbb      	ldrb	r3, [r7, #22]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004102:	e0ba      	b.n	800427a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
    goto error;
 800411a:	e0ae      	b.n	800427a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b04      	cmp	r3, #4
 8004126:	d003      	beq.n	8004130 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2205      	movs	r2, #5
 800412c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	887a      	ldrh	r2, [r7, #2]
 8004146:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b04      	cmp	r3, #4
 8004170:	d108      	bne.n	8004184 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	4a45      	ldr	r2, [pc, #276]	; (800428c <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	4a44      	ldr	r2, [pc, #272]	; (8004290 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
 8004182:	e007      	b.n	8004194 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004188:	4a42      	ldr	r2, [pc, #264]	; (8004294 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	4a41      	ldr	r2, [pc, #260]	; (8004298 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	4a40      	ldr	r2, [pc, #256]	; (800429c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800419a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	4619      	mov	r1, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041bc:	f7fe fd72 	bl	8002ca4 <HAL_DMA_Start_IT>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80041d6:	e050      	b.n	800427a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	2200      	movs	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	2200      	movs	r2, #0
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fc:	2200      	movs	r2, #0
 80041fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004204:	2200      	movs	r2, #0
 8004206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4619      	mov	r1, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004220:	f7fe fd40 	bl	8002ca4 <HAL_DMA_Start_IT>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0210 	orr.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]

    goto error;
 800423a:	e01e      	b.n	800427a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d007      	beq.n	800425a <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004258:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0220 	orr.w	r2, r2, #32
 8004268:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0202 	orr.w	r2, r2, #2
 8004278:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	08004611 	.word	0x08004611
 8004290:	080044d9 	.word	0x080044d9
 8004294:	0800462d 	.word	0x0800462d
 8004298:	08004581 	.word	0x08004581
 800429c:	08004649 	.word	0x08004649

080042a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
    return;
 80042de:	e0ce      	b.n	800447e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_SPI_IRQHandler+0x5e>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
    return;
 80042fc:	e0bf      	b.n	800447e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_SPI_IRQHandler+0x7e>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80b0 	beq.w	800447e <HAL_SPI_IRQHandler+0x1de>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80aa 	beq.w	800447e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b03      	cmp	r3, #3
 800433e:	d011      	beq.n	8004364 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e00b      	b.n	800437c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]
        return;
 800437a:	e080      	b.n	800447e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d014      	beq.n	80043b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0208 	orr.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d04f      	beq.n	800447c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_SPI_IRQHandler+0x168>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d034      	beq.n	8004472 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0203 	bic.w	r2, r2, #3
 8004416:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_SPI_IRQHandler+0x1e4>)
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fd01 	bl	8002e34 <HAL_DMA_Abort_IT>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	2b00      	cmp	r3, #0
 800444a:	d016      	beq.n	800447a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <HAL_SPI_IRQHandler+0x1e4>)
 8004452:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe fceb 	bl	8002e34 <HAL_DMA_Abort_IT>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004470:	e003      	b.n	800447a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f826 	bl	80044c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004478:	e000      	b.n	800447c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800447a:	bf00      	nop
    return;
 800447c:	bf00      	nop
  }
}
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08004689 	.word	0x08004689

08004488 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e6:	f7fe f9ed 	bl	80028c4 <HAL_GetTick>
 80044ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fa:	d03b      	beq.n	8004574 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0220 	bic.w	r2, r2, #32
 800450a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <SPI_DMAReceiveCplt+0x58>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451c:	d108      	bne.n	8004530 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0203 	bic.w	r2, r2, #3
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	e007      	b.n	8004540 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f93b 	bl	80047c0 <SPI_EndRxTransaction>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff ffa9 	bl	80044c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004572:	e002      	b.n	800457a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ff87 	bl	8004488 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458e:	f7fe f999 	bl	80028c4 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d02f      	beq.n	8004604 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0220 	bic.w	r2, r2, #32
 80045b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f967 	bl	800488c <SPI_EndRxTxTransaction>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0203 	bic.w	r2, r2, #3
 80045de:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff61 	bl	80044c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004602:	e002      	b.n	800460a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7fb ffc1 	bl	800058c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff3c 	bl	800449c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff38 	bl	80044b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0203 	bic.w	r2, r2, #3
 8004664:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff ff22 	bl	80044c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff0e 	bl	80044c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c0:	f7fe f900 	bl	80028c4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d0:	f7fe f8f8 	bl	80028c4 <HAL_GetTick>
 80046d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	015b      	lsls	r3, r3, #5
 80046dc:	0d1b      	lsrs	r3, r3, #20
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046e6:	e054      	b.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ee:	d050      	beq.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f0:	f7fe f8e8 	bl	80028c4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d902      	bls.n	8004706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d13d      	bne.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d111      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004728:	d004      	beq.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d107      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d10f      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800476c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e017      	b.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3b01      	subs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d19b      	bne.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2000001c 	.word	0x2000001c

080047c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d111      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d004      	beq.n	80047ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d107      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004802:	d12a      	bne.n	800485a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d012      	beq.n	8004834 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff ff49 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02d      	beq.n	8004880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e026      	b.n	8004882 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2200      	movs	r2, #0
 800483c:	2101      	movs	r1, #1
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff ff36 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01a      	beq.n	8004880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e013      	b.n	8004882 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2200      	movs	r2, #0
 8004862:	2101      	movs	r1, #1
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff23 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e000      	b.n	8004882 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2201      	movs	r2, #1
 80048a0:	2102      	movs	r1, #2
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff ff04 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e032      	b.n	8004924 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <SPI_EndRxTxTransaction+0xa0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <SPI_EndRxTxTransaction+0xa4>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	0d5b      	lsrs	r3, r3, #21
 80048ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048dc:	d112      	bne.n	8004904 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff fee1 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d016      	beq.n	8004922 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e00f      	b.n	8004924 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3b01      	subs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d0f2      	beq.n	8004904 <SPI_EndRxTxTransaction+0x78>
 800491e:	e000      	b.n	8004922 <SPI_EndRxTxTransaction+0x96>
        break;
 8004920:	bf00      	nop
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	2000001c 	.word	0x2000001c
 8004930:	165e9f81 	.word	0x165e9f81

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e041      	b.n	80049ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd f8b0 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 f8f4 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_ConfigClockSource+0x1c>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0b4      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x186>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a26:	d03e      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0xd4>
 8004a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2c:	f200 8087 	bhi.w	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	f000 8086 	beq.w	8004b44 <HAL_TIM_ConfigClockSource+0x172>
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3c:	d87f      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a3e:	2b70      	cmp	r3, #112	; 0x70
 8004a40:	d01a      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0xa6>
 8004a42:	2b70      	cmp	r3, #112	; 0x70
 8004a44:	d87b      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a46:	2b60      	cmp	r3, #96	; 0x60
 8004a48:	d050      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x11a>
 8004a4a:	2b60      	cmp	r3, #96	; 0x60
 8004a4c:	d877      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a4e:	2b50      	cmp	r3, #80	; 0x50
 8004a50:	d03c      	beq.n	8004acc <HAL_TIM_ConfigClockSource+0xfa>
 8004a52:	2b50      	cmp	r3, #80	; 0x50
 8004a54:	d873      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d058      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0x13a>
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d86f      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d064      	beq.n	8004b2c <HAL_TIM_ConfigClockSource+0x15a>
 8004a62:	2b30      	cmp	r3, #48	; 0x30
 8004a64:	d86b      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d060      	beq.n	8004b2c <HAL_TIM_ConfigClockSource+0x15a>
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d867      	bhi.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d05c      	beq.n	8004b2c <HAL_TIM_ConfigClockSource+0x15a>
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d05a      	beq.n	8004b2c <HAL_TIM_ConfigClockSource+0x15a>
 8004a76:	e062      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	f000 f970 	bl	8004d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
      break;
 8004aa4:	e04f      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab6:	f000 f959 	bl	8004d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac8:	609a      	str	r2, [r3, #8]
      break;
 8004aca:	e03c      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f000 f8cd 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2150      	movs	r1, #80	; 0x50
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f926 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004aea:	e02c      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af8:	461a      	mov	r2, r3
 8004afa:	f000 f8ec 	bl	8004cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2160      	movs	r1, #96	; 0x60
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f916 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b0a:	e01c      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f000 f8ad 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2140      	movs	r1, #64	; 0x40
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f906 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 f8fd 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d00b      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <TIM_Base_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a36      	ldr	r2, [pc, #216]	; (8004c64 <TIM_Base_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <TIM_Base_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d108      	bne.n	8004baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01b      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d017      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <TIM_Base_SetConfig+0x100>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <TIM_Base_SetConfig+0x104>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <TIM_Base_SetConfig+0x108>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <TIM_Base_SetConfig+0x10c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	; (8004c70 <TIM_Base_SetConfig+0x110>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 0210 	bic.w	r2, r3, #16
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	031b      	lsls	r3, r3, #12
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f043 0307 	orr.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e050      	b.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d013      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10c      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fe26 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fdc1 	bl	8005a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d156      	bne.n	8004ff0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_Transmit_DMA+0x26>
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e04f      	b.n	8004ff2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_UART_Transmit_DMA+0xd4>)
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <HAL_UART_Transmit_DMA+0xd8>)
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_UART_Transmit_DMA+0xdc>)
 8004f88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	2200      	movs	r2, #0
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	f7fd fe7b 	bl	8002ca4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6a39      	ldr	r1, [r7, #32]
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	08005581 	.word	0x08005581
 8005000:	0800561b 	.word	0x0800561b
 8005004:	08005637 	.word	0x08005637

08005008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b0ba      	sub	sp, #232	; 0xe8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <HAL_UART_IRQHandler+0x66>
 800505a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fc36 	bl	80058d8 <UART_Receive_IT>
      return;
 800506c:	e25b      	b.n	8005526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800506e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80de 	beq.w	8005234 <HAL_UART_IRQHandler+0x22c>
 8005078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80d1 	beq.w	8005234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_UART_IRQHandler+0xae>
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0201 	orr.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0xd2>
 80050c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f043 0202 	orr.w	r2, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xf6>
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f043 0204 	orr.w	r2, r3, #4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <HAL_UART_IRQHandler+0x126>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f043 0208 	orr.w	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 81f2 	beq.w	800551c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_UART_IRQHandler+0x14e>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fbc1 	bl	80058d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_UART_IRQHandler+0x17a>
 800517a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d04f      	beq.n	8005222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fac9 	bl	800571a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d141      	bne.n	800521a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1d9      	bne.n	8005196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d013      	beq.n	8005212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	4a7e      	ldr	r2, [pc, #504]	; (80053e8 <HAL_UART_IRQHandler+0x3e0>)
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fe1c 	bl	8002e34 <HAL_DMA_Abort_IT>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e00e      	b.n	8005230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f99e 	bl	8005554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e00a      	b.n	8005230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f99a 	bl	8005554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	e006      	b.n	8005230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f996 	bl	8005554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800522e:	e175      	b.n	800551c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	bf00      	nop
    return;
 8005232:	e173      	b.n	800551c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	2b01      	cmp	r3, #1
 800523a:	f040 814f 	bne.w	80054dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8148 	beq.w	80054dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8141 	beq.w	80054dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	f040 80b6 	bne.w	80053ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800528c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8145 	beq.w	8005520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800529a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800529e:	429a      	cmp	r2, r3
 80052a0:	f080 813e 	bcs.w	8005520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b6:	f000 8088 	beq.w	80053ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1d9      	bne.n	80052ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3314      	adds	r3, #20
 8005326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800532a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800532e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005332:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800533c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e1      	bne.n	8005306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3314      	adds	r3, #20
 8005348:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3314      	adds	r3, #20
 8005362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005366:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005368:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800536c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e3      	bne.n	8005342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539a:	f023 0310 	bic.w	r3, r3, #16
 800539e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e3      	bne.n	8005388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fcc5 	bl	8002d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	b29b      	uxth	r3, r3
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8c1 	bl	8005568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053e6:	e09b      	b.n	8005520 <HAL_UART_IRQHandler+0x518>
 80053e8:	080057e1 	.word	0x080057e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 808e 	beq.w	8005524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8089 	beq.w	8005524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005436:	647a      	str	r2, [r7, #68]	; 0x44
 8005438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800543c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e3      	bne.n	8005412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	623b      	str	r3, [r7, #32]
   return(result);
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800546e:	633a      	str	r2, [r7, #48]	; 0x30
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e3      	bne.n	800544a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0310 	bic.w	r3, r3, #16
 80054a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054b4:	61fa      	str	r2, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	617b      	str	r3, [r7, #20]
   return(result);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e3      	bne.n	8005490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f847 	bl	8005568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054da:	e023      	b.n	8005524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <HAL_UART_IRQHandler+0x4f4>
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f987 	bl	8005808 <UART_Transmit_IT>
    return;
 80054fa:	e014      	b.n	8005526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <HAL_UART_IRQHandler+0x51e>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9c7 	bl	80058a8 <UART_EndTransmit_IT>
    return;
 800551a:	e004      	b.n	8005526 <HAL_UART_IRQHandler+0x51e>
    return;
 800551c:	bf00      	nop
 800551e:	e002      	b.n	8005526 <HAL_UART_IRQHandler+0x51e>
      return;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <HAL_UART_IRQHandler+0x51e>
      return;
 8005524:	bf00      	nop
  }
}
 8005526:	37e8      	adds	r7, #232	; 0xe8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b090      	sub	sp, #64	; 0x40
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d137      	bne.n	800560c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	2200      	movs	r2, #0
 80055a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	623b      	str	r3, [r7, #32]
   return(result);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c2:	633a      	str	r2, [r7, #48]	; 0x30
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f6:	61fa      	str	r2, [r7, #28]
 80055f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	69b9      	ldr	r1, [r7, #24]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	617b      	str	r3, [r7, #20]
   return(result);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800560a:	e002      	b.n	8005612 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800560c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800560e:	f7fa ffe7 	bl	80005e0 <HAL_UART_TxCpltCallback>
}
 8005612:	bf00      	nop
 8005614:	3740      	adds	r7, #64	; 0x40
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff ff7f 	bl	800552c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b21      	cmp	r3, #33	; 0x21
 8005668:	d108      	bne.n	800567c <UART_DMAError+0x46>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005676:	68b8      	ldr	r0, [r7, #8]
 8005678:	f000 f827 	bl	80056ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b22      	cmp	r3, #34	; 0x22
 800569c:	d108      	bne.n	80056b0 <UART_DMAError+0x7a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056aa:	68b8      	ldr	r0, [r7, #8]
 80056ac:	f000 f835 	bl	800571a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	f043 0210 	orr.w	r2, r3, #16
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056bc:	68b8      	ldr	r0, [r7, #8]
 80056be:	f7ff ff49 	bl	8005554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b089      	sub	sp, #36	; 0x24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	61ba      	str	r2, [r7, #24]
 80056f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	; 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b095      	sub	sp, #84	; 0x54
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005742:	643a      	str	r2, [r7, #64]	; 0x40
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	61fb      	str	r3, [r7, #28]
   return(result);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	64bb      	str	r3, [r7, #72]	; 0x48
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	2b01      	cmp	r3, #1
 8005790:	d119      	bne.n	80057c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	647b      	str	r3, [r7, #68]	; 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b2:	61ba      	str	r2, [r7, #24]
 80057b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6979      	ldr	r1, [r7, #20]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057d4:	bf00      	nop
 80057d6:	3754      	adds	r7, #84	; 0x54
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff feaa 	bl	8005554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b21      	cmp	r3, #33	; 0x21
 800581a:	d13e      	bne.n	800589a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005824:	d114      	bne.n	8005850 <UART_Transmit_IT+0x48>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d110      	bne.n	8005850 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005842:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]
 800584e:	e008      	b.n	8005862 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6211      	str	r1, [r2, #32]
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29b      	uxth	r3, r3
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4619      	mov	r1, r3
 8005870:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005884:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005894:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fa fe89 	bl	80005e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b22      	cmp	r3, #34	; 0x22
 80058ea:	f040 80ae 	bne.w	8005a4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f6:	d117      	bne.n	8005928 <UART_Receive_IT+0x50>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d113      	bne.n	8005928 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	b29a      	uxth	r2, r3
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
 8005926:	e026      	b.n	8005976 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	d007      	beq.n	800594c <UART_Receive_IT+0x74>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <UART_Receive_IT+0x82>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	e008      	b.n	800596c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4619      	mov	r1, r3
 8005984:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005986:	2b00      	cmp	r3, #0
 8005988:	d15d      	bne.n	8005a46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0220 	bic.w	r2, r2, #32
 8005998:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d135      	bne.n	8005a3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	613b      	str	r3, [r7, #16]
   return(result);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f023 0310 	bic.w	r3, r3, #16
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f6:	623a      	str	r2, [r7, #32]
 80059f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	69f9      	ldr	r1, [r7, #28]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e5      	bne.n	80059d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d10a      	bne.n	8005a2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fd97 	bl	8005568 <HAL_UARTEx_RxEventCallback>
 8005a3a:	e002      	b.n	8005a42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fd7f 	bl	8005540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e002      	b.n	8005a4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
  }
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3730      	adds	r7, #48	; 0x30
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a58:	b0c0      	sub	sp, #256	; 0x100
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	ea40 0301 	orr.w	r3, r0, r1
 8005a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005aac:	f021 010c 	bic.w	r1, r1, #12
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aba:	430b      	orrs	r3, r1
 8005abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	6999      	ldr	r1, [r3, #24]
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	ea40 0301 	orr.w	r3, r0, r1
 8005ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4b8f      	ldr	r3, [pc, #572]	; (8005d20 <UART_SetConfig+0x2cc>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d005      	beq.n	8005af4 <UART_SetConfig+0xa0>
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b8d      	ldr	r3, [pc, #564]	; (8005d24 <UART_SetConfig+0x2d0>)
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d104      	bne.n	8005afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fe fa3c 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8005af8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005afc:	e003      	b.n	8005b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005afe:	f7fe fa23 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8005b02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b10:	f040 810c 	bne.w	8005d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b26:	4622      	mov	r2, r4
 8005b28:	462b      	mov	r3, r5
 8005b2a:	1891      	adds	r1, r2, r2
 8005b2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b2e:	415b      	adcs	r3, r3
 8005b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b36:	4621      	mov	r1, r4
 8005b38:	eb12 0801 	adds.w	r8, r2, r1
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	eb43 0901 	adc.w	r9, r3, r1
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b56:	4690      	mov	r8, r2
 8005b58:	4699      	mov	r9, r3
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	eb18 0303 	adds.w	r3, r8, r3
 8005b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b64:	462b      	mov	r3, r5
 8005b66:	eb49 0303 	adc.w	r3, r9, r3
 8005b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b82:	460b      	mov	r3, r1
 8005b84:	18db      	adds	r3, r3, r3
 8005b86:	653b      	str	r3, [r7, #80]	; 0x50
 8005b88:	4613      	mov	r3, r2
 8005b8a:	eb42 0303 	adc.w	r3, r2, r3
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b98:	f7fa fb7a 	bl	8000290 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4b61      	ldr	r3, [pc, #388]	; (8005d28 <UART_SetConfig+0x2d4>)
 8005ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	011c      	lsls	r4, r3, #4
 8005baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	1891      	adds	r1, r2, r2
 8005bc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bc4:	415b      	adcs	r3, r3
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bcc:	4641      	mov	r1, r8
 8005bce:	eb12 0a01 	adds.w	sl, r2, r1
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bec:	4692      	mov	sl, r2
 8005bee:	469b      	mov	fp, r3
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8005bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8005c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	18db      	adds	r3, r3, r3
 8005c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1e:	4613      	mov	r3, r2
 8005c20:	eb42 0303 	adc.w	r3, r2, r3
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
 8005c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c2e:	f7fa fb2f 	bl	8000290 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <UART_SetConfig+0x2d4>)
 8005c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2264      	movs	r2, #100	; 0x64
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	1acb      	subs	r3, r1, r3
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c4e:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <UART_SetConfig+0x2d4>)
 8005c50:	fba3 2302 	umull	r2, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c5c:	441c      	add	r4, r3
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	1891      	adds	r1, r2, r2
 8005c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c80:	4641      	mov	r1, r8
 8005c82:	1851      	adds	r1, r2, r1
 8005c84:	6339      	str	r1, [r7, #48]	; 0x30
 8005c86:	4649      	mov	r1, r9
 8005c88:	414b      	adcs	r3, r1
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c98:	4659      	mov	r1, fp
 8005c9a:	00cb      	lsls	r3, r1, #3
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	00ca      	lsls	r2, r1, #3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	4642      	mov	r2, r8
 8005cae:	189b      	adds	r3, r3, r2
 8005cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	eb42 0303 	adc.w	r3, r2, r3
 8005cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	18db      	adds	r3, r3, r3
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cda:	4613      	mov	r3, r2
 8005cdc:	eb42 0303 	adc.w	r3, r2, r3
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cea:	f7fa fad1 	bl	8000290 <__aeabi_uldivmod>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <UART_SetConfig+0x2d4>)
 8005cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	2164      	movs	r1, #100	; 0x64
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	3332      	adds	r3, #50	; 0x32
 8005d06:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <UART_SetConfig+0x2d4>)
 8005d08:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	f003 0207 	and.w	r2, r3, #7
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4422      	add	r2, r4
 8005d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d1c:	e106      	b.n	8005f2c <UART_SetConfig+0x4d8>
 8005d1e:	bf00      	nop
 8005d20:	40011000 	.word	0x40011000
 8005d24:	40011400 	.word	0x40011400
 8005d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d3e:	4642      	mov	r2, r8
 8005d40:	464b      	mov	r3, r9
 8005d42:	1891      	adds	r1, r2, r2
 8005d44:	6239      	str	r1, [r7, #32]
 8005d46:	415b      	adcs	r3, r3
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d4e:	4641      	mov	r1, r8
 8005d50:	1854      	adds	r4, r2, r1
 8005d52:	4649      	mov	r1, r9
 8005d54:	eb43 0501 	adc.w	r5, r3, r1
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	00eb      	lsls	r3, r5, #3
 8005d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d66:	00e2      	lsls	r2, r4, #3
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	4643      	mov	r3, r8
 8005d6e:	18e3      	adds	r3, r4, r3
 8005d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d74:	464b      	mov	r3, r9
 8005d76:	eb45 0303 	adc.w	r3, r5, r3
 8005d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	008b      	lsls	r3, r1, #2
 8005d9e:	4621      	mov	r1, r4
 8005da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da4:	4621      	mov	r1, r4
 8005da6:	008a      	lsls	r2, r1, #2
 8005da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dac:	f7fa fa70 	bl	8000290 <__aeabi_uldivmod>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4b60      	ldr	r3, [pc, #384]	; (8005f38 <UART_SetConfig+0x4e4>)
 8005db6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	011c      	lsls	r4, r3, #4
 8005dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	61b9      	str	r1, [r7, #24]
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de0:	4641      	mov	r1, r8
 8005de2:	1851      	adds	r1, r2, r1
 8005de4:	6139      	str	r1, [r7, #16]
 8005de6:	4649      	mov	r1, r9
 8005de8:	414b      	adcs	r3, r1
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	00cb      	lsls	r3, r1, #3
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e02:	4651      	mov	r1, sl
 8005e04:	00ca      	lsls	r2, r1, #3
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e14:	464b      	mov	r3, r9
 8005e16:	460a      	mov	r2, r1
 8005e18:	eb42 0303 	adc.w	r3, r2, r3
 8005e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e38:	4649      	mov	r1, r9
 8005e3a:	008b      	lsls	r3, r1, #2
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e42:	4641      	mov	r1, r8
 8005e44:	008a      	lsls	r2, r1, #2
 8005e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e4a:	f7fa fa21 	bl	8000290 <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <UART_SetConfig+0x4e4>)
 8005e56:	fba3 2301 	umull	r2, r3, r3, r1
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	2264      	movs	r2, #100	; 0x64
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	1acb      	subs	r3, r1, r3
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	3332      	adds	r3, #50	; 0x32
 8005e68:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <UART_SetConfig+0x4e4>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e74:	441c      	add	r4, r3
 8005e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	673b      	str	r3, [r7, #112]	; 0x70
 8005e7e:	677a      	str	r2, [r7, #116]	; 0x74
 8005e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e94:	4641      	mov	r1, r8
 8005e96:	1851      	adds	r1, r2, r1
 8005e98:	6039      	str	r1, [r7, #0]
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	607b      	str	r3, [r7, #4]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eac:	4659      	mov	r1, fp
 8005eae:	00cb      	lsls	r3, r1, #3
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	00ca      	lsls	r2, r1, #3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	460a      	mov	r2, r1
 8005eca:	eb42 0303 	adc.w	r3, r2, r3
 8005ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eda:	667a      	str	r2, [r7, #100]	; 0x64
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ee8:	4649      	mov	r1, r9
 8005eea:	008b      	lsls	r3, r1, #2
 8005eec:	4641      	mov	r1, r8
 8005eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	008a      	lsls	r2, r1, #2
 8005ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005efa:	f7fa f9c9 	bl	8000290 <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <UART_SetConfig+0x4e4>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	; 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	3332      	adds	r3, #50	; 0x32
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <UART_SetConfig+0x4e4>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f003 020f 	and.w	r2, r3, #15
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4422      	add	r2, r4
 8005f2a:	609a      	str	r2, [r3, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f32:	46bd      	mov	sp, r7
 8005f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f38:	51eb851f 	.word	0x51eb851f

08005f3c <sniprintf>:
 8005f3c:	b40c      	push	{r2, r3}
 8005f3e:	b530      	push	{r4, r5, lr}
 8005f40:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <sniprintf+0x64>)
 8005f42:	1e0c      	subs	r4, r1, #0
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	b09d      	sub	sp, #116	; 0x74
 8005f48:	da08      	bge.n	8005f5c <sniprintf+0x20>
 8005f4a:	238b      	movs	r3, #139	; 0x8b
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f52:	b01d      	add	sp, #116	; 0x74
 8005f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f58:	b002      	add	sp, #8
 8005f5a:	4770      	bx	lr
 8005f5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f64:	bf14      	ite	ne
 8005f66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005f6a:	4623      	moveq	r3, r4
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f74:	9002      	str	r0, [sp, #8]
 8005f76:	9006      	str	r0, [sp, #24]
 8005f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f7e:	ab21      	add	r3, sp, #132	; 0x84
 8005f80:	a902      	add	r1, sp, #8
 8005f82:	4628      	mov	r0, r5
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	f000 f9a3 	bl	80062d0 <_svfiprintf_r>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	bfbc      	itt	lt
 8005f8e:	238b      	movlt	r3, #139	; 0x8b
 8005f90:	602b      	strlt	r3, [r5, #0]
 8005f92:	2c00      	cmp	r4, #0
 8005f94:	d0dd      	beq.n	8005f52 <sniprintf+0x16>
 8005f96:	9b02      	ldr	r3, [sp, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e7d9      	b.n	8005f52 <sniprintf+0x16>
 8005f9e:	bf00      	nop
 8005fa0:	200000a0 	.word	0x200000a0

08005fa4 <memcmp>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	3901      	subs	r1, #1
 8005fa8:	4402      	add	r2, r0
 8005faa:	4290      	cmp	r0, r2
 8005fac:	d101      	bne.n	8005fb2 <memcmp+0xe>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e005      	b.n	8005fbe <memcmp+0x1a>
 8005fb2:	7803      	ldrb	r3, [r0, #0]
 8005fb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d001      	beq.n	8005fc0 <memcmp+0x1c>
 8005fbc:	1b18      	subs	r0, r3, r4
 8005fbe:	bd10      	pop	{r4, pc}
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	e7f2      	b.n	8005faa <memcmp+0x6>

08005fc4 <memset>:
 8005fc4:	4402      	add	r2, r0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d100      	bne.n	8005fce <memset+0xa>
 8005fcc:	4770      	bx	lr
 8005fce:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd2:	e7f9      	b.n	8005fc8 <memset+0x4>

08005fd4 <__errno>:
 8005fd4:	4b01      	ldr	r3, [pc, #4]	; (8005fdc <__errno+0x8>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	200000a0 	.word	0x200000a0

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4d0d      	ldr	r5, [pc, #52]	; (8006018 <__libc_init_array+0x38>)
 8005fe4:	4c0d      	ldr	r4, [pc, #52]	; (800601c <__libc_init_array+0x3c>)
 8005fe6:	1b64      	subs	r4, r4, r5
 8005fe8:	10a4      	asrs	r4, r4, #2
 8005fea:	2600      	movs	r6, #0
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	4d0b      	ldr	r5, [pc, #44]	; (8006020 <__libc_init_array+0x40>)
 8005ff2:	4c0c      	ldr	r4, [pc, #48]	; (8006024 <__libc_init_array+0x44>)
 8005ff4:	f000 fc6a 	bl	80068cc <_init>
 8005ff8:	1b64      	subs	r4, r4, r5
 8005ffa:	10a4      	asrs	r4, r4, #2
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	08006af8 	.word	0x08006af8
 800601c:	08006af8 	.word	0x08006af8
 8006020:	08006af8 	.word	0x08006af8
 8006024:	08006afc 	.word	0x08006afc

08006028 <__retarget_lock_acquire_recursive>:
 8006028:	4770      	bx	lr

0800602a <__retarget_lock_release_recursive>:
 800602a:	4770      	bx	lr

0800602c <_free_r>:
 800602c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800602e:	2900      	cmp	r1, #0
 8006030:	d044      	beq.n	80060bc <_free_r+0x90>
 8006032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006036:	9001      	str	r0, [sp, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f1a1 0404 	sub.w	r4, r1, #4
 800603e:	bfb8      	it	lt
 8006040:	18e4      	addlt	r4, r4, r3
 8006042:	f000 f8df 	bl	8006204 <__malloc_lock>
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <_free_r+0x94>)
 8006048:	9801      	ldr	r0, [sp, #4]
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	b933      	cbnz	r3, 800605c <_free_r+0x30>
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	6014      	str	r4, [r2, #0]
 8006052:	b003      	add	sp, #12
 8006054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006058:	f000 b8da 	b.w	8006210 <__malloc_unlock>
 800605c:	42a3      	cmp	r3, r4
 800605e:	d908      	bls.n	8006072 <_free_r+0x46>
 8006060:	6825      	ldr	r5, [r4, #0]
 8006062:	1961      	adds	r1, r4, r5
 8006064:	428b      	cmp	r3, r1
 8006066:	bf01      	itttt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	1949      	addeq	r1, r1, r5
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	e7ed      	b.n	800604e <_free_r+0x22>
 8006072:	461a      	mov	r2, r3
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b10b      	cbz	r3, 800607c <_free_r+0x50>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d9fa      	bls.n	8006072 <_free_r+0x46>
 800607c:	6811      	ldr	r1, [r2, #0]
 800607e:	1855      	adds	r5, r2, r1
 8006080:	42a5      	cmp	r5, r4
 8006082:	d10b      	bne.n	800609c <_free_r+0x70>
 8006084:	6824      	ldr	r4, [r4, #0]
 8006086:	4421      	add	r1, r4
 8006088:	1854      	adds	r4, r2, r1
 800608a:	42a3      	cmp	r3, r4
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	d1e0      	bne.n	8006052 <_free_r+0x26>
 8006090:	681c      	ldr	r4, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	6053      	str	r3, [r2, #4]
 8006096:	440c      	add	r4, r1
 8006098:	6014      	str	r4, [r2, #0]
 800609a:	e7da      	b.n	8006052 <_free_r+0x26>
 800609c:	d902      	bls.n	80060a4 <_free_r+0x78>
 800609e:	230c      	movs	r3, #12
 80060a0:	6003      	str	r3, [r0, #0]
 80060a2:	e7d6      	b.n	8006052 <_free_r+0x26>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1961      	adds	r1, r4, r5
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf04      	itt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	bf04      	itt	eq
 80060b4:	1949      	addeq	r1, r1, r5
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	6054      	str	r4, [r2, #4]
 80060ba:	e7ca      	b.n	8006052 <_free_r+0x26>
 80060bc:	b003      	add	sp, #12
 80060be:	bd30      	pop	{r4, r5, pc}
 80060c0:	2000c508 	.word	0x2000c508

080060c4 <sbrk_aligned>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4e0e      	ldr	r6, [pc, #56]	; (8006100 <sbrk_aligned+0x3c>)
 80060c8:	460c      	mov	r4, r1
 80060ca:	6831      	ldr	r1, [r6, #0]
 80060cc:	4605      	mov	r5, r0
 80060ce:	b911      	cbnz	r1, 80060d6 <sbrk_aligned+0x12>
 80060d0:	f000 fba6 	bl	8006820 <_sbrk_r>
 80060d4:	6030      	str	r0, [r6, #0]
 80060d6:	4621      	mov	r1, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 fba1 	bl	8006820 <_sbrk_r>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d00a      	beq.n	80060f8 <sbrk_aligned+0x34>
 80060e2:	1cc4      	adds	r4, r0, #3
 80060e4:	f024 0403 	bic.w	r4, r4, #3
 80060e8:	42a0      	cmp	r0, r4
 80060ea:	d007      	beq.n	80060fc <sbrk_aligned+0x38>
 80060ec:	1a21      	subs	r1, r4, r0
 80060ee:	4628      	mov	r0, r5
 80060f0:	f000 fb96 	bl	8006820 <_sbrk_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	d101      	bne.n	80060fc <sbrk_aligned+0x38>
 80060f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060fc:	4620      	mov	r0, r4
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	2000c50c 	.word	0x2000c50c

08006104 <_malloc_r>:
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	1ccd      	adds	r5, r1, #3
 800610a:	f025 0503 	bic.w	r5, r5, #3
 800610e:	3508      	adds	r5, #8
 8006110:	2d0c      	cmp	r5, #12
 8006112:	bf38      	it	cc
 8006114:	250c      	movcc	r5, #12
 8006116:	2d00      	cmp	r5, #0
 8006118:	4607      	mov	r7, r0
 800611a:	db01      	blt.n	8006120 <_malloc_r+0x1c>
 800611c:	42a9      	cmp	r1, r5
 800611e:	d905      	bls.n	800612c <_malloc_r+0x28>
 8006120:	230c      	movs	r3, #12
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	2600      	movs	r6, #0
 8006126:	4630      	mov	r0, r6
 8006128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006200 <_malloc_r+0xfc>
 8006130:	f000 f868 	bl	8006204 <__malloc_lock>
 8006134:	f8d8 3000 	ldr.w	r3, [r8]
 8006138:	461c      	mov	r4, r3
 800613a:	bb5c      	cbnz	r4, 8006194 <_malloc_r+0x90>
 800613c:	4629      	mov	r1, r5
 800613e:	4638      	mov	r0, r7
 8006140:	f7ff ffc0 	bl	80060c4 <sbrk_aligned>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	4604      	mov	r4, r0
 8006148:	d155      	bne.n	80061f6 <_malloc_r+0xf2>
 800614a:	f8d8 4000 	ldr.w	r4, [r8]
 800614e:	4626      	mov	r6, r4
 8006150:	2e00      	cmp	r6, #0
 8006152:	d145      	bne.n	80061e0 <_malloc_r+0xdc>
 8006154:	2c00      	cmp	r4, #0
 8006156:	d048      	beq.n	80061ea <_malloc_r+0xe6>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	4631      	mov	r1, r6
 800615c:	4638      	mov	r0, r7
 800615e:	eb04 0903 	add.w	r9, r4, r3
 8006162:	f000 fb5d 	bl	8006820 <_sbrk_r>
 8006166:	4581      	cmp	r9, r0
 8006168:	d13f      	bne.n	80061ea <_malloc_r+0xe6>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	1a6d      	subs	r5, r5, r1
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa7 	bl	80060c4 <sbrk_aligned>
 8006176:	3001      	adds	r0, #1
 8006178:	d037      	beq.n	80061ea <_malloc_r+0xe6>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	442b      	add	r3, r5
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	f8d8 3000 	ldr.w	r3, [r8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d038      	beq.n	80061fa <_malloc_r+0xf6>
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	42a2      	cmp	r2, r4
 800618c:	d12b      	bne.n	80061e6 <_malloc_r+0xe2>
 800618e:	2200      	movs	r2, #0
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e00f      	b.n	80061b4 <_malloc_r+0xb0>
 8006194:	6822      	ldr	r2, [r4, #0]
 8006196:	1b52      	subs	r2, r2, r5
 8006198:	d41f      	bmi.n	80061da <_malloc_r+0xd6>
 800619a:	2a0b      	cmp	r2, #11
 800619c:	d917      	bls.n	80061ce <_malloc_r+0xca>
 800619e:	1961      	adds	r1, r4, r5
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	6025      	str	r5, [r4, #0]
 80061a4:	bf18      	it	ne
 80061a6:	6059      	strne	r1, [r3, #4]
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	bf08      	it	eq
 80061ac:	f8c8 1000 	streq.w	r1, [r8]
 80061b0:	5162      	str	r2, [r4, r5]
 80061b2:	604b      	str	r3, [r1, #4]
 80061b4:	4638      	mov	r0, r7
 80061b6:	f104 060b 	add.w	r6, r4, #11
 80061ba:	f000 f829 	bl	8006210 <__malloc_unlock>
 80061be:	f026 0607 	bic.w	r6, r6, #7
 80061c2:	1d23      	adds	r3, r4, #4
 80061c4:	1af2      	subs	r2, r6, r3
 80061c6:	d0ae      	beq.n	8006126 <_malloc_r+0x22>
 80061c8:	1b9b      	subs	r3, r3, r6
 80061ca:	50a3      	str	r3, [r4, r2]
 80061cc:	e7ab      	b.n	8006126 <_malloc_r+0x22>
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6862      	ldr	r2, [r4, #4]
 80061d2:	d1dd      	bne.n	8006190 <_malloc_r+0x8c>
 80061d4:	f8c8 2000 	str.w	r2, [r8]
 80061d8:	e7ec      	b.n	80061b4 <_malloc_r+0xb0>
 80061da:	4623      	mov	r3, r4
 80061dc:	6864      	ldr	r4, [r4, #4]
 80061de:	e7ac      	b.n	800613a <_malloc_r+0x36>
 80061e0:	4634      	mov	r4, r6
 80061e2:	6876      	ldr	r6, [r6, #4]
 80061e4:	e7b4      	b.n	8006150 <_malloc_r+0x4c>
 80061e6:	4613      	mov	r3, r2
 80061e8:	e7cc      	b.n	8006184 <_malloc_r+0x80>
 80061ea:	230c      	movs	r3, #12
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4638      	mov	r0, r7
 80061f0:	f000 f80e 	bl	8006210 <__malloc_unlock>
 80061f4:	e797      	b.n	8006126 <_malloc_r+0x22>
 80061f6:	6025      	str	r5, [r4, #0]
 80061f8:	e7dc      	b.n	80061b4 <_malloc_r+0xb0>
 80061fa:	605b      	str	r3, [r3, #4]
 80061fc:	deff      	udf	#255	; 0xff
 80061fe:	bf00      	nop
 8006200:	2000c508 	.word	0x2000c508

08006204 <__malloc_lock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_lock+0x8>)
 8006206:	f7ff bf0f 	b.w	8006028 <__retarget_lock_acquire_recursive>
 800620a:	bf00      	nop
 800620c:	2000c504 	.word	0x2000c504

08006210 <__malloc_unlock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_unlock+0x8>)
 8006212:	f7ff bf0a 	b.w	800602a <__retarget_lock_release_recursive>
 8006216:	bf00      	nop
 8006218:	2000c504 	.word	0x2000c504

0800621c <__ssputs_r>:
 800621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	688e      	ldr	r6, [r1, #8]
 8006222:	461f      	mov	r7, r3
 8006224:	42be      	cmp	r6, r7
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	4682      	mov	sl, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4690      	mov	r8, r2
 800622e:	d82c      	bhi.n	800628a <__ssputs_r+0x6e>
 8006230:	898a      	ldrh	r2, [r1, #12]
 8006232:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006236:	d026      	beq.n	8006286 <__ssputs_r+0x6a>
 8006238:	6965      	ldr	r5, [r4, #20]
 800623a:	6909      	ldr	r1, [r1, #16]
 800623c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006240:	eba3 0901 	sub.w	r9, r3, r1
 8006244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006248:	1c7b      	adds	r3, r7, #1
 800624a:	444b      	add	r3, r9
 800624c:	106d      	asrs	r5, r5, #1
 800624e:	429d      	cmp	r5, r3
 8006250:	bf38      	it	cc
 8006252:	461d      	movcc	r5, r3
 8006254:	0553      	lsls	r3, r2, #21
 8006256:	d527      	bpl.n	80062a8 <__ssputs_r+0x8c>
 8006258:	4629      	mov	r1, r5
 800625a:	f7ff ff53 	bl	8006104 <_malloc_r>
 800625e:	4606      	mov	r6, r0
 8006260:	b360      	cbz	r0, 80062bc <__ssputs_r+0xa0>
 8006262:	6921      	ldr	r1, [r4, #16]
 8006264:	464a      	mov	r2, r9
 8006266:	f000 faeb 	bl	8006840 <memcpy>
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	6126      	str	r6, [r4, #16]
 8006278:	6165      	str	r5, [r4, #20]
 800627a:	444e      	add	r6, r9
 800627c:	eba5 0509 	sub.w	r5, r5, r9
 8006280:	6026      	str	r6, [r4, #0]
 8006282:	60a5      	str	r5, [r4, #8]
 8006284:	463e      	mov	r6, r7
 8006286:	42be      	cmp	r6, r7
 8006288:	d900      	bls.n	800628c <__ssputs_r+0x70>
 800628a:	463e      	mov	r6, r7
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	4632      	mov	r2, r6
 8006290:	4641      	mov	r1, r8
 8006292:	f000 faab 	bl	80067ec <memmove>
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	1b9b      	subs	r3, r3, r6
 800629a:	60a3      	str	r3, [r4, #8]
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	4433      	add	r3, r6
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2000      	movs	r0, #0
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	462a      	mov	r2, r5
 80062aa:	f000 fad7 	bl	800685c <_realloc_r>
 80062ae:	4606      	mov	r6, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d1e0      	bne.n	8006276 <__ssputs_r+0x5a>
 80062b4:	6921      	ldr	r1, [r4, #16]
 80062b6:	4650      	mov	r0, sl
 80062b8:	f7ff feb8 	bl	800602c <_free_r>
 80062bc:	230c      	movs	r3, #12
 80062be:	f8ca 3000 	str.w	r3, [sl]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ce:	e7e9      	b.n	80062a4 <__ssputs_r+0x88>

080062d0 <_svfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4698      	mov	r8, r3
 80062d6:	898b      	ldrh	r3, [r1, #12]
 80062d8:	061b      	lsls	r3, r3, #24
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	4607      	mov	r7, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	4614      	mov	r4, r2
 80062e2:	d50e      	bpl.n	8006302 <_svfiprintf_r+0x32>
 80062e4:	690b      	ldr	r3, [r1, #16]
 80062e6:	b963      	cbnz	r3, 8006302 <_svfiprintf_r+0x32>
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	f7ff ff0b 	bl	8006104 <_malloc_r>
 80062ee:	6028      	str	r0, [r5, #0]
 80062f0:	6128      	str	r0, [r5, #16]
 80062f2:	b920      	cbnz	r0, 80062fe <_svfiprintf_r+0x2e>
 80062f4:	230c      	movs	r3, #12
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fc:	e0d0      	b.n	80064a0 <_svfiprintf_r+0x1d0>
 80062fe:	2340      	movs	r3, #64	; 0x40
 8006300:	616b      	str	r3, [r5, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	9309      	str	r3, [sp, #36]	; 0x24
 8006306:	2320      	movs	r3, #32
 8006308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800630c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006310:	2330      	movs	r3, #48	; 0x30
 8006312:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064b8 <_svfiprintf_r+0x1e8>
 8006316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800631a:	f04f 0901 	mov.w	r9, #1
 800631e:	4623      	mov	r3, r4
 8006320:	469a      	mov	sl, r3
 8006322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006326:	b10a      	cbz	r2, 800632c <_svfiprintf_r+0x5c>
 8006328:	2a25      	cmp	r2, #37	; 0x25
 800632a:	d1f9      	bne.n	8006320 <_svfiprintf_r+0x50>
 800632c:	ebba 0b04 	subs.w	fp, sl, r4
 8006330:	d00b      	beq.n	800634a <_svfiprintf_r+0x7a>
 8006332:	465b      	mov	r3, fp
 8006334:	4622      	mov	r2, r4
 8006336:	4629      	mov	r1, r5
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ff6f 	bl	800621c <__ssputs_r>
 800633e:	3001      	adds	r0, #1
 8006340:	f000 80a9 	beq.w	8006496 <_svfiprintf_r+0x1c6>
 8006344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006346:	445a      	add	r2, fp
 8006348:	9209      	str	r2, [sp, #36]	; 0x24
 800634a:	f89a 3000 	ldrb.w	r3, [sl]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80a1 	beq.w	8006496 <_svfiprintf_r+0x1c6>
 8006354:	2300      	movs	r3, #0
 8006356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635e:	f10a 0a01 	add.w	sl, sl, #1
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	9307      	str	r3, [sp, #28]
 8006366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800636a:	931a      	str	r3, [sp, #104]	; 0x68
 800636c:	4654      	mov	r4, sl
 800636e:	2205      	movs	r2, #5
 8006370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006374:	4850      	ldr	r0, [pc, #320]	; (80064b8 <_svfiprintf_r+0x1e8>)
 8006376:	f7f9 ff3b 	bl	80001f0 <memchr>
 800637a:	9a04      	ldr	r2, [sp, #16]
 800637c:	b9d8      	cbnz	r0, 80063b6 <_svfiprintf_r+0xe6>
 800637e:	06d0      	lsls	r0, r2, #27
 8006380:	bf44      	itt	mi
 8006382:	2320      	movmi	r3, #32
 8006384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006388:	0711      	lsls	r1, r2, #28
 800638a:	bf44      	itt	mi
 800638c:	232b      	movmi	r3, #43	; 0x2b
 800638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006392:	f89a 3000 	ldrb.w	r3, [sl]
 8006396:	2b2a      	cmp	r3, #42	; 0x2a
 8006398:	d015      	beq.n	80063c6 <_svfiprintf_r+0xf6>
 800639a:	9a07      	ldr	r2, [sp, #28]
 800639c:	4654      	mov	r4, sl
 800639e:	2000      	movs	r0, #0
 80063a0:	f04f 0c0a 	mov.w	ip, #10
 80063a4:	4621      	mov	r1, r4
 80063a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063aa:	3b30      	subs	r3, #48	; 0x30
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	d94d      	bls.n	800644c <_svfiprintf_r+0x17c>
 80063b0:	b1b0      	cbz	r0, 80063e0 <_svfiprintf_r+0x110>
 80063b2:	9207      	str	r2, [sp, #28]
 80063b4:	e014      	b.n	80063e0 <_svfiprintf_r+0x110>
 80063b6:	eba0 0308 	sub.w	r3, r0, r8
 80063ba:	fa09 f303 	lsl.w	r3, r9, r3
 80063be:	4313      	orrs	r3, r2
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	46a2      	mov	sl, r4
 80063c4:	e7d2      	b.n	800636c <_svfiprintf_r+0x9c>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	1d19      	adds	r1, r3, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfbb      	ittet	lt
 80063d2:	425b      	neglt	r3, r3
 80063d4:	f042 0202 	orrlt.w	r2, r2, #2
 80063d8:	9307      	strge	r3, [sp, #28]
 80063da:	9307      	strlt	r3, [sp, #28]
 80063dc:	bfb8      	it	lt
 80063de:	9204      	strlt	r2, [sp, #16]
 80063e0:	7823      	ldrb	r3, [r4, #0]
 80063e2:	2b2e      	cmp	r3, #46	; 0x2e
 80063e4:	d10c      	bne.n	8006400 <_svfiprintf_r+0x130>
 80063e6:	7863      	ldrb	r3, [r4, #1]
 80063e8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ea:	d134      	bne.n	8006456 <_svfiprintf_r+0x186>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9203      	str	r2, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfb8      	it	lt
 80063f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063fc:	3402      	adds	r4, #2
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80064c8 <_svfiprintf_r+0x1f8>
 8006404:	7821      	ldrb	r1, [r4, #0]
 8006406:	2203      	movs	r2, #3
 8006408:	4650      	mov	r0, sl
 800640a:	f7f9 fef1 	bl	80001f0 <memchr>
 800640e:	b138      	cbz	r0, 8006420 <_svfiprintf_r+0x150>
 8006410:	9b04      	ldr	r3, [sp, #16]
 8006412:	eba0 000a 	sub.w	r0, r0, sl
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	4082      	lsls	r2, r0
 800641a:	4313      	orrs	r3, r2
 800641c:	3401      	adds	r4, #1
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	4825      	ldr	r0, [pc, #148]	; (80064bc <_svfiprintf_r+0x1ec>)
 8006426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800642a:	2206      	movs	r2, #6
 800642c:	f7f9 fee0 	bl	80001f0 <memchr>
 8006430:	2800      	cmp	r0, #0
 8006432:	d038      	beq.n	80064a6 <_svfiprintf_r+0x1d6>
 8006434:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <_svfiprintf_r+0x1f0>)
 8006436:	bb1b      	cbnz	r3, 8006480 <_svfiprintf_r+0x1b0>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	3307      	adds	r3, #7
 800643c:	f023 0307 	bic.w	r3, r3, #7
 8006440:	3308      	adds	r3, #8
 8006442:	9303      	str	r3, [sp, #12]
 8006444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006446:	4433      	add	r3, r6
 8006448:	9309      	str	r3, [sp, #36]	; 0x24
 800644a:	e768      	b.n	800631e <_svfiprintf_r+0x4e>
 800644c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006450:	460c      	mov	r4, r1
 8006452:	2001      	movs	r0, #1
 8006454:	e7a6      	b.n	80063a4 <_svfiprintf_r+0xd4>
 8006456:	2300      	movs	r3, #0
 8006458:	3401      	adds	r4, #1
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	4619      	mov	r1, r3
 800645e:	f04f 0c0a 	mov.w	ip, #10
 8006462:	4620      	mov	r0, r4
 8006464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006468:	3a30      	subs	r2, #48	; 0x30
 800646a:	2a09      	cmp	r2, #9
 800646c:	d903      	bls.n	8006476 <_svfiprintf_r+0x1a6>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0c6      	beq.n	8006400 <_svfiprintf_r+0x130>
 8006472:	9105      	str	r1, [sp, #20]
 8006474:	e7c4      	b.n	8006400 <_svfiprintf_r+0x130>
 8006476:	fb0c 2101 	mla	r1, ip, r1, r2
 800647a:	4604      	mov	r4, r0
 800647c:	2301      	movs	r3, #1
 800647e:	e7f0      	b.n	8006462 <_svfiprintf_r+0x192>
 8006480:	ab03      	add	r3, sp, #12
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	462a      	mov	r2, r5
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <_svfiprintf_r+0x1f4>)
 8006488:	a904      	add	r1, sp, #16
 800648a:	4638      	mov	r0, r7
 800648c:	f3af 8000 	nop.w
 8006490:	1c42      	adds	r2, r0, #1
 8006492:	4606      	mov	r6, r0
 8006494:	d1d6      	bne.n	8006444 <_svfiprintf_r+0x174>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	065b      	lsls	r3, r3, #25
 800649a:	f53f af2d 	bmi.w	80062f8 <_svfiprintf_r+0x28>
 800649e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a0:	b01d      	add	sp, #116	; 0x74
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	462a      	mov	r2, r5
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <_svfiprintf_r+0x1f4>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	4638      	mov	r0, r7
 80064b2:	f000 f879 	bl	80065a8 <_printf_i>
 80064b6:	e7eb      	b.n	8006490 <_svfiprintf_r+0x1c0>
 80064b8:	08006abc 	.word	0x08006abc
 80064bc:	08006ac6 	.word	0x08006ac6
 80064c0:	00000000 	.word	0x00000000
 80064c4:	0800621d 	.word	0x0800621d
 80064c8:	08006ac2 	.word	0x08006ac2

080064cc <_printf_common>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	4616      	mov	r6, r2
 80064d2:	4699      	mov	r9, r3
 80064d4:	688a      	ldr	r2, [r1, #8]
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064dc:	4293      	cmp	r3, r2
 80064de:	bfb8      	it	lt
 80064e0:	4613      	movlt	r3, r2
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064e8:	4607      	mov	r7, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	b10a      	cbz	r2, 80064f2 <_printf_common+0x26>
 80064ee:	3301      	adds	r3, #1
 80064f0:	6033      	str	r3, [r6, #0]
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	0699      	lsls	r1, r3, #26
 80064f6:	bf42      	ittt	mi
 80064f8:	6833      	ldrmi	r3, [r6, #0]
 80064fa:	3302      	addmi	r3, #2
 80064fc:	6033      	strmi	r3, [r6, #0]
 80064fe:	6825      	ldr	r5, [r4, #0]
 8006500:	f015 0506 	ands.w	r5, r5, #6
 8006504:	d106      	bne.n	8006514 <_printf_common+0x48>
 8006506:	f104 0a19 	add.w	sl, r4, #25
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	6832      	ldr	r2, [r6, #0]
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	42ab      	cmp	r3, r5
 8006512:	dc26      	bgt.n	8006562 <_printf_common+0x96>
 8006514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006518:	1e13      	subs	r3, r2, #0
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	bf18      	it	ne
 800651e:	2301      	movne	r3, #1
 8006520:	0692      	lsls	r2, r2, #26
 8006522:	d42b      	bmi.n	800657c <_printf_common+0xb0>
 8006524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006528:	4649      	mov	r1, r9
 800652a:	4638      	mov	r0, r7
 800652c:	47c0      	blx	r8
 800652e:	3001      	adds	r0, #1
 8006530:	d01e      	beq.n	8006570 <_printf_common+0xa4>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	6922      	ldr	r2, [r4, #16]
 8006536:	f003 0306 	and.w	r3, r3, #6
 800653a:	2b04      	cmp	r3, #4
 800653c:	bf02      	ittt	eq
 800653e:	68e5      	ldreq	r5, [r4, #12]
 8006540:	6833      	ldreq	r3, [r6, #0]
 8006542:	1aed      	subeq	r5, r5, r3
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	bf0c      	ite	eq
 8006548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800654c:	2500      	movne	r5, #0
 800654e:	4293      	cmp	r3, r2
 8006550:	bfc4      	itt	gt
 8006552:	1a9b      	subgt	r3, r3, r2
 8006554:	18ed      	addgt	r5, r5, r3
 8006556:	2600      	movs	r6, #0
 8006558:	341a      	adds	r4, #26
 800655a:	42b5      	cmp	r5, r6
 800655c:	d11a      	bne.n	8006594 <_printf_common+0xc8>
 800655e:	2000      	movs	r0, #0
 8006560:	e008      	b.n	8006574 <_printf_common+0xa8>
 8006562:	2301      	movs	r3, #1
 8006564:	4652      	mov	r2, sl
 8006566:	4649      	mov	r1, r9
 8006568:	4638      	mov	r0, r7
 800656a:	47c0      	blx	r8
 800656c:	3001      	adds	r0, #1
 800656e:	d103      	bne.n	8006578 <_printf_common+0xac>
 8006570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	3501      	adds	r5, #1
 800657a:	e7c6      	b.n	800650a <_printf_common+0x3e>
 800657c:	18e1      	adds	r1, r4, r3
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	2030      	movs	r0, #48	; 0x30
 8006582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006586:	4422      	add	r2, r4
 8006588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800658c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006590:	3302      	adds	r3, #2
 8006592:	e7c7      	b.n	8006524 <_printf_common+0x58>
 8006594:	2301      	movs	r3, #1
 8006596:	4622      	mov	r2, r4
 8006598:	4649      	mov	r1, r9
 800659a:	4638      	mov	r0, r7
 800659c:	47c0      	blx	r8
 800659e:	3001      	adds	r0, #1
 80065a0:	d0e6      	beq.n	8006570 <_printf_common+0xa4>
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7d9      	b.n	800655a <_printf_common+0x8e>
	...

080065a8 <_printf_i>:
 80065a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065ac:	7e0f      	ldrb	r7, [r1, #24]
 80065ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065b0:	2f78      	cmp	r7, #120	; 0x78
 80065b2:	4691      	mov	r9, r2
 80065b4:	4680      	mov	r8, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	469a      	mov	sl, r3
 80065ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065be:	d807      	bhi.n	80065d0 <_printf_i+0x28>
 80065c0:	2f62      	cmp	r7, #98	; 0x62
 80065c2:	d80a      	bhi.n	80065da <_printf_i+0x32>
 80065c4:	2f00      	cmp	r7, #0
 80065c6:	f000 80d4 	beq.w	8006772 <_printf_i+0x1ca>
 80065ca:	2f58      	cmp	r7, #88	; 0x58
 80065cc:	f000 80c0 	beq.w	8006750 <_printf_i+0x1a8>
 80065d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065d8:	e03a      	b.n	8006650 <_printf_i+0xa8>
 80065da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065de:	2b15      	cmp	r3, #21
 80065e0:	d8f6      	bhi.n	80065d0 <_printf_i+0x28>
 80065e2:	a101      	add	r1, pc, #4	; (adr r1, 80065e8 <_printf_i+0x40>)
 80065e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065e8:	08006641 	.word	0x08006641
 80065ec:	08006655 	.word	0x08006655
 80065f0:	080065d1 	.word	0x080065d1
 80065f4:	080065d1 	.word	0x080065d1
 80065f8:	080065d1 	.word	0x080065d1
 80065fc:	080065d1 	.word	0x080065d1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065d1 	.word	0x080065d1
 8006608:	080065d1 	.word	0x080065d1
 800660c:	080065d1 	.word	0x080065d1
 8006610:	080065d1 	.word	0x080065d1
 8006614:	08006759 	.word	0x08006759
 8006618:	08006681 	.word	0x08006681
 800661c:	08006713 	.word	0x08006713
 8006620:	080065d1 	.word	0x080065d1
 8006624:	080065d1 	.word	0x080065d1
 8006628:	0800677b 	.word	0x0800677b
 800662c:	080065d1 	.word	0x080065d1
 8006630:	08006681 	.word	0x08006681
 8006634:	080065d1 	.word	0x080065d1
 8006638:	080065d1 	.word	0x080065d1
 800663c:	0800671b 	.word	0x0800671b
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	1d1a      	adds	r2, r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	602a      	str	r2, [r5, #0]
 8006648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006650:	2301      	movs	r3, #1
 8006652:	e09f      	b.n	8006794 <_printf_i+0x1ec>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	0607      	lsls	r7, r0, #24
 800665a:	f103 0104 	add.w	r1, r3, #4
 800665e:	6029      	str	r1, [r5, #0]
 8006660:	d501      	bpl.n	8006666 <_printf_i+0xbe>
 8006662:	681e      	ldr	r6, [r3, #0]
 8006664:	e003      	b.n	800666e <_printf_i+0xc6>
 8006666:	0646      	lsls	r6, r0, #25
 8006668:	d5fb      	bpl.n	8006662 <_printf_i+0xba>
 800666a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800666e:	2e00      	cmp	r6, #0
 8006670:	da03      	bge.n	800667a <_printf_i+0xd2>
 8006672:	232d      	movs	r3, #45	; 0x2d
 8006674:	4276      	negs	r6, r6
 8006676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667a:	485a      	ldr	r0, [pc, #360]	; (80067e4 <_printf_i+0x23c>)
 800667c:	230a      	movs	r3, #10
 800667e:	e012      	b.n	80066a6 <_printf_i+0xfe>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	1d19      	adds	r1, r3, #4
 8006686:	6029      	str	r1, [r5, #0]
 8006688:	0605      	lsls	r5, r0, #24
 800668a:	d501      	bpl.n	8006690 <_printf_i+0xe8>
 800668c:	681e      	ldr	r6, [r3, #0]
 800668e:	e002      	b.n	8006696 <_printf_i+0xee>
 8006690:	0641      	lsls	r1, r0, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0xe4>
 8006694:	881e      	ldrh	r6, [r3, #0]
 8006696:	4853      	ldr	r0, [pc, #332]	; (80067e4 <_printf_i+0x23c>)
 8006698:	2f6f      	cmp	r7, #111	; 0x6f
 800669a:	bf0c      	ite	eq
 800669c:	2308      	moveq	r3, #8
 800669e:	230a      	movne	r3, #10
 80066a0:	2100      	movs	r1, #0
 80066a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066a6:	6865      	ldr	r5, [r4, #4]
 80066a8:	60a5      	str	r5, [r4, #8]
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	bfa2      	ittt	ge
 80066ae:	6821      	ldrge	r1, [r4, #0]
 80066b0:	f021 0104 	bicge.w	r1, r1, #4
 80066b4:	6021      	strge	r1, [r4, #0]
 80066b6:	b90e      	cbnz	r6, 80066bc <_printf_i+0x114>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	d04b      	beq.n	8006754 <_printf_i+0x1ac>
 80066bc:	4615      	mov	r5, r2
 80066be:	fbb6 f1f3 	udiv	r1, r6, r3
 80066c2:	fb03 6711 	mls	r7, r3, r1, r6
 80066c6:	5dc7      	ldrb	r7, [r0, r7]
 80066c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066cc:	4637      	mov	r7, r6
 80066ce:	42bb      	cmp	r3, r7
 80066d0:	460e      	mov	r6, r1
 80066d2:	d9f4      	bls.n	80066be <_printf_i+0x116>
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d10b      	bne.n	80066f0 <_printf_i+0x148>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	07de      	lsls	r6, r3, #31
 80066dc:	d508      	bpl.n	80066f0 <_printf_i+0x148>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	6861      	ldr	r1, [r4, #4]
 80066e2:	4299      	cmp	r1, r3
 80066e4:	bfde      	ittt	le
 80066e6:	2330      	movle	r3, #48	; 0x30
 80066e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066f0:	1b52      	subs	r2, r2, r5
 80066f2:	6122      	str	r2, [r4, #16]
 80066f4:	f8cd a000 	str.w	sl, [sp]
 80066f8:	464b      	mov	r3, r9
 80066fa:	aa03      	add	r2, sp, #12
 80066fc:	4621      	mov	r1, r4
 80066fe:	4640      	mov	r0, r8
 8006700:	f7ff fee4 	bl	80064cc <_printf_common>
 8006704:	3001      	adds	r0, #1
 8006706:	d14a      	bne.n	800679e <_printf_i+0x1f6>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800670c:	b004      	add	sp, #16
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	4833      	ldr	r0, [pc, #204]	; (80067e8 <_printf_i+0x240>)
 800671c:	2778      	movs	r7, #120	; 0x78
 800671e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6829      	ldr	r1, [r5, #0]
 8006726:	061f      	lsls	r7, r3, #24
 8006728:	f851 6b04 	ldr.w	r6, [r1], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0x18c>
 800672e:	065f      	lsls	r7, r3, #25
 8006730:	bf48      	it	mi
 8006732:	b2b6      	uxthmi	r6, r6
 8006734:	07df      	lsls	r7, r3, #31
 8006736:	bf48      	it	mi
 8006738:	f043 0320 	orrmi.w	r3, r3, #32
 800673c:	6029      	str	r1, [r5, #0]
 800673e:	bf48      	it	mi
 8006740:	6023      	strmi	r3, [r4, #0]
 8006742:	b91e      	cbnz	r6, 800674c <_printf_i+0x1a4>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	f023 0320 	bic.w	r3, r3, #32
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	2310      	movs	r3, #16
 800674e:	e7a7      	b.n	80066a0 <_printf_i+0xf8>
 8006750:	4824      	ldr	r0, [pc, #144]	; (80067e4 <_printf_i+0x23c>)
 8006752:	e7e4      	b.n	800671e <_printf_i+0x176>
 8006754:	4615      	mov	r5, r2
 8006756:	e7bd      	b.n	80066d4 <_printf_i+0x12c>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	6826      	ldr	r6, [r4, #0]
 800675c:	6961      	ldr	r1, [r4, #20]
 800675e:	1d18      	adds	r0, r3, #4
 8006760:	6028      	str	r0, [r5, #0]
 8006762:	0635      	lsls	r5, r6, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	d501      	bpl.n	800676c <_printf_i+0x1c4>
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0x1ca>
 800676c:	0670      	lsls	r0, r6, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0x1c0>
 8006770:	8019      	strh	r1, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	4615      	mov	r5, r2
 8006778:	e7bc      	b.n	80066f4 <_printf_i+0x14c>
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	2100      	movs	r1, #0
 8006786:	4628      	mov	r0, r5
 8006788:	f7f9 fd32 	bl	80001f0 <memchr>
 800678c:	b108      	cbz	r0, 8006792 <_printf_i+0x1ea>
 800678e:	1b40      	subs	r0, r0, r5
 8006790:	6060      	str	r0, [r4, #4]
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679c:	e7aa      	b.n	80066f4 <_printf_i+0x14c>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	462a      	mov	r2, r5
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0ad      	beq.n	8006708 <_printf_i+0x160>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	079b      	lsls	r3, r3, #30
 80067b0:	d413      	bmi.n	80067da <_printf_i+0x232>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e7a6      	b.n	800670c <_printf_i+0x164>
 80067be:	2301      	movs	r3, #1
 80067c0:	4632      	mov	r2, r6
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d09d      	beq.n	8006708 <_printf_i+0x160>
 80067cc:	3501      	adds	r5, #1
 80067ce:	68e3      	ldr	r3, [r4, #12]
 80067d0:	9903      	ldr	r1, [sp, #12]
 80067d2:	1a5b      	subs	r3, r3, r1
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	dcf2      	bgt.n	80067be <_printf_i+0x216>
 80067d8:	e7eb      	b.n	80067b2 <_printf_i+0x20a>
 80067da:	2500      	movs	r5, #0
 80067dc:	f104 0619 	add.w	r6, r4, #25
 80067e0:	e7f5      	b.n	80067ce <_printf_i+0x226>
 80067e2:	bf00      	nop
 80067e4:	08006acd 	.word	0x08006acd
 80067e8:	08006ade 	.word	0x08006ade

080067ec <memmove>:
 80067ec:	4288      	cmp	r0, r1
 80067ee:	b510      	push	{r4, lr}
 80067f0:	eb01 0402 	add.w	r4, r1, r2
 80067f4:	d902      	bls.n	80067fc <memmove+0x10>
 80067f6:	4284      	cmp	r4, r0
 80067f8:	4623      	mov	r3, r4
 80067fa:	d807      	bhi.n	800680c <memmove+0x20>
 80067fc:	1e43      	subs	r3, r0, #1
 80067fe:	42a1      	cmp	r1, r4
 8006800:	d008      	beq.n	8006814 <memmove+0x28>
 8006802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800680a:	e7f8      	b.n	80067fe <memmove+0x12>
 800680c:	4402      	add	r2, r0
 800680e:	4601      	mov	r1, r0
 8006810:	428a      	cmp	r2, r1
 8006812:	d100      	bne.n	8006816 <memmove+0x2a>
 8006814:	bd10      	pop	{r4, pc}
 8006816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800681a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800681e:	e7f7      	b.n	8006810 <memmove+0x24>

08006820 <_sbrk_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	; (800683c <_sbrk_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7fb fa8c 	bl	8001d48 <_sbrk>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_sbrk_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_sbrk_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	2000c500 	.word	0x2000c500

08006840 <memcpy>:
 8006840:	440a      	add	r2, r1
 8006842:	4291      	cmp	r1, r2
 8006844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006848:	d100      	bne.n	800684c <memcpy+0xc>
 800684a:	4770      	bx	lr
 800684c:	b510      	push	{r4, lr}
 800684e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006856:	4291      	cmp	r1, r2
 8006858:	d1f9      	bne.n	800684e <memcpy+0xe>
 800685a:	bd10      	pop	{r4, pc}

0800685c <_realloc_r>:
 800685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006860:	4680      	mov	r8, r0
 8006862:	4614      	mov	r4, r2
 8006864:	460e      	mov	r6, r1
 8006866:	b921      	cbnz	r1, 8006872 <_realloc_r+0x16>
 8006868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	4611      	mov	r1, r2
 800686e:	f7ff bc49 	b.w	8006104 <_malloc_r>
 8006872:	b92a      	cbnz	r2, 8006880 <_realloc_r+0x24>
 8006874:	f7ff fbda 	bl	800602c <_free_r>
 8006878:	4625      	mov	r5, r4
 800687a:	4628      	mov	r0, r5
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006880:	f000 f81b 	bl	80068ba <_malloc_usable_size_r>
 8006884:	4284      	cmp	r4, r0
 8006886:	4607      	mov	r7, r0
 8006888:	d802      	bhi.n	8006890 <_realloc_r+0x34>
 800688a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800688e:	d812      	bhi.n	80068b6 <_realloc_r+0x5a>
 8006890:	4621      	mov	r1, r4
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff fc36 	bl	8006104 <_malloc_r>
 8006898:	4605      	mov	r5, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d0ed      	beq.n	800687a <_realloc_r+0x1e>
 800689e:	42bc      	cmp	r4, r7
 80068a0:	4622      	mov	r2, r4
 80068a2:	4631      	mov	r1, r6
 80068a4:	bf28      	it	cs
 80068a6:	463a      	movcs	r2, r7
 80068a8:	f7ff ffca 	bl	8006840 <memcpy>
 80068ac:	4631      	mov	r1, r6
 80068ae:	4640      	mov	r0, r8
 80068b0:	f7ff fbbc 	bl	800602c <_free_r>
 80068b4:	e7e1      	b.n	800687a <_realloc_r+0x1e>
 80068b6:	4635      	mov	r5, r6
 80068b8:	e7df      	b.n	800687a <_realloc_r+0x1e>

080068ba <_malloc_usable_size_r>:
 80068ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068be:	1f18      	subs	r0, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbc      	itt	lt
 80068c4:	580b      	ldrlt	r3, [r1, r0]
 80068c6:	18c0      	addlt	r0, r0, r3
 80068c8:	4770      	bx	lr
	...

080068cc <_init>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr

080068d8 <_fini>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr
